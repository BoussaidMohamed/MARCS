.TH "Waypoint" 3 "Wed Sep 11 2013" "MARCS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Waypoint \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'Waypoints\&.h'\fP
.SS "Public Member Functions"
.SS "Private Attributes"
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBWaypoint\fP ()"

.PP
Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBWaypoint\fP instance 
.RE
.PP

.PP
.nf
4 {
5     m_iNumber = 0;
6     m_pCoordinates = new LatLongCoord();
7     m_dAltitude = 0\&.;
8     m_pAction = new Action();
9 }
.fi
.SS "\fBWaypoint\fP (intp_iNumber)"

.PP
Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_iNumber\fP waypoint number int 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBWaypoint\fP instance 
.RE
.PP

.PP
.nf
12 {
13     m_iNumber = p_iNumber;
14     m_pCoordinates = new LatLongCoord();
15     m_dAltitude = 0\&.;
16     m_pAction = new Action();
17 }
.fi
.SS "\fBWaypoint\fP (\fBWaypoint\fP *p_pWaypoint)"

.PP
Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_pWaypoint\fP waypoint model Waypoint* 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBWaypoint\fP instance 
.RE
.PP

.PP
.nf
19                                        :m_dAltitude(p_pWaypoint->m_dAltitude), m_iNumber(p_pWaypoint->m_iNumber)
20 {
21     m_pCoordinates = new LatLongCoord(p_pWaypoint->m_pCoordinates);
22     m_pAction = new Action(p_pWaypoint->m_pAction);
23 }
.fi
.SS "\fBWaypoint\fP (\fBLatLongCoord\fP *p_pCoordinates, doublep_dAltitude = \fC0\&.\fP)"

.PP
Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_pCoordinates\fP waypoint coordinates LatLongCoord* 
.br
\fIp_dAltitude\fP waypoint altitude double 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBWaypoint\fP instance 
.RE
.PP

.PP
.nf
26 {
27     m_iNumber = 0;
28     m_pCoordinates = p_pCoordinates;
29     m_dAltitude = p_dAltitude;
30     m_pAction = new Action();
31 }
.fi
.SS "~\fBWaypoint\fP ()"

.PP
Destructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
34 {
35     delete m_pCoordinates;
36     delete m_pAction;
37 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "Action * getAction ()"

.PP
\fBWaypoint\fP action getter\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
76 {
77     return m_pAction;
78 }
.fi
.SS "double getAltitude ()"

.PP
\fBWaypoint\fP altitude getter\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
71 {
72     return m_dAltitude;
73 }
.fi
.SS "\fBLatLongCoord\fP * getCoordinates ()"

.PP
\fBWaypoint\fP coordinates getter\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
66 {
67     return m_pCoordinates;
68 }
.fi
.SS "double getDistance (\fBWaypoint\fP *p_pWaypoint)"

.PP
Compute distance between 2 waypoints\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_pWaypoint\fP second waypoint model Waypoint* 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
81 {
82     return m_pCoordinates->getDistance(p_pWaypoint->m_pCoordinates);
83 }
.fi
.SS "int getNumber ()"

.PP
\fBWaypoint\fP number getter\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
86 {
87     return m_iNumber;
88 }
.fi
.SS "bool operator== (const \fBWaypoint\fP &p_pWaypoint)"

.PP
Comparaison operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_pWaypoint\fP second waypoint model \fBWaypoint\fP& 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Equality between the 2 models bool 
.RE
.PP

.PP
.nf
109 {
110     bool bCoordinates = *this->m_pCoordinates == *p_pWaypoint\&.m_pCoordinates;
111     bool bAltitude = this->m_dAltitude == p_pWaypoint\&.m_dAltitude;
112     bool bAction = *this->m_pAction == *p_pWaypoint\&.m_pAction;
113 
114     return bCoordinates && bAltitude && bAction;
115 }
.fi
.SS "void setAction (Action *p_pAction)"

.PP
Action setter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_pAction\fP associated action Action* 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
51 {
52     m_pAction = p_pAction;
53 }
.fi
.SS "void setAction (QStringp_pAction)"

.PP
set action by its string 
.PP
\fBParameters:\fP
.RS 4
\fIp_pAction\fP associated action string QString 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
56 {
57     m_pAction->setType(p_pAction);
58 }
.fi
.SS "void setAltitude (doublep_dAltitude)"

.PP
Altitude setter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_dAltitude\fP waypoint altitude double 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
46 {
47     m_dAltitude = p_dAltitude;
48 }
.fi
.SS "void setCoordinates (\fBLatLongCoord\fP *p_pCoordinates, doublep_dAltitude = \fC0\&.\fP)"

.PP
Coordinates setter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_pCoordinates\fP waypoint coordinates LatLongCoord* 
.br
\fIp_dAltitude\fP waypoint altitude double 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
40 {
41     m_pCoordinates = p_pCoordinates;
42     m_dAltitude = p_dAltitude;
43 }
.fi
.SS "void setNumber (intp_iNumber)"

.PP
\fBWaypoint\fP number setter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_iNumber\fP waypoint number int 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
61 {
62     m_iNumber = p_iNumber;
63 }
.fi
.SS "QDomElement toXML (QDomDocumentp_pDocument)"

.PP
Describe a waypoint in XML structure\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
XML representation of waypoint QDomElement 
.RE
.PP

.PP
.nf
91 {
92     QDomElement pWaypoint = p_pDocument\&.createElement("waypoint");
93 
94     QDomElement pLocation = p_pDocument\&.createElement("location");
95     pLocation\&.setAttribute("longitude", m_pCoordinates->getLongitude());
96     pLocation\&.setAttribute("latitude", m_pCoordinates->getLatitude());
97     pLocation\&.setAttribute("altitude", m_dAltitude);
98     
99     QDomElement pAction = p_pDocument\&.createElement("action");
100     pAction\&.setAttribute("name", m_pAction->getTypeString());
101 
102     pWaypoint\&.appendChild(pLocation);
103     pWaypoint\&.appendChild(pAction);
104 
105     return pWaypoint;
106 }
.fi
.SH "Field Documentation"
.PP 
.SS "double m_dAltitude\fC [private]\fP"

.SS "int m_iNumber\fC [private]\fP"

.SS "Action* m_pAction\fC [private]\fP"

.SS "\fBLatLongCoord\fP* m_pCoordinates\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for MARCS from the source code\&.
