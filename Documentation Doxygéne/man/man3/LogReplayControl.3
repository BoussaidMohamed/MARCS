.TH "LogReplayControl" 3 "Wed Sep 11 2013" "MARCS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LogReplayControl \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'LogReplayControl\&.h'\fP
.PP
Inherits QObject\&.
.SS "Public Slots"
.SS "Signals"
.SS "Static Public Member Functions"
.SS "Private Member Functions"
.SS "Private Attributes"
.SS "Static Private Attributes"
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBLogReplayControl\fP ()\fC [private]\fP"

.PP
Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLogReplayControl\fP instance 
.RE
.PP

.PP
.nf
6 {
7     /*m_pStartPause = new ToggleButton();
8     m_pIncSpeed = new QPushButton();
9     m_pDecSpeed = new QPushButton();
10     m_pStop = new QPushButton();*/
11     m_iData = 0;
12     m_bReverse = false;
13     connect(&m_pReplayTimer, SIGNAL(timeout()), this, SLOT(replay()));
14 }
.fi
.SS "~\fBLogReplayControl\fP ()\fC [private]\fP"

.PP
Destructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
26 {
27 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void backward ()\fC [slot]\fP"

.PP
.nf
77 {
78     if (m_bReverse == true)
79     {
80         m_pReplayTimer\&.setInterval(m_pReplayTimer\&.interval() + 50);
81     }
82     else
83     {
84         m_pReplayTimer\&.setInterval(m_pReplayTimer\&.interval() - 50);
85 
86         if (m_pReplayTimer\&.interval() <= 0)
87         {
88             m_pReplayTimer\&.setInterval(50);
89             m_bReverse = true;
90         }
91     }
92 }
.fi
.SS "void forward ()\fC [slot]\fP"

.PP
.nf
59 {
60     if (m_bReverse == false)
61     {
62         m_pReplayTimer\&.setInterval(m_pReplayTimer\&.interval() + 50);
63     }
64     else
65     {
66         m_pReplayTimer\&.setInterval(m_pReplayTimer\&.interval() - 50);
67 
68         if (m_pReplayTimer\&.interval() <= 0)
69         {
70             m_pReplayTimer\&.setInterval(50);
71             m_bReverse = false;
72         }
73     }
74 }
.fi
.SS "void geolocation (doublelatitude, doublelongitude, doublealtitude, doubleheading)\fC [signal]\fP"

.PP
Update MUAV geolocation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP longitude double 
.br
\fIy\fP latitude double 
.br
\fIz\fP altitude double 
.br
\fIyaw\fP heading double 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.SS "\fBLogReplayControl\fP * getInstance ()\fC [static]\fP"

.PP
\fBLogReplayControl\fP lone instance getter\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
lone instance MissionControl* 
.RE
.PP

.PP
.nf
30 {
31     if (singleton == NULL)
32     {
33         singleton = new LogReplayControl();
34     }
35 
36     return singleton;
37 }
.fi
.SS "void kill ()\fC [static]\fP"

.PP
Instance killer\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
.nf
17 {
18     if (singleton != NULL)
19     {
20         delete singleton;
21         singleton = NULL;
22     }
23 }
.fi
.SS "void openLog ()\fC [slot]\fP"

.PP
.nf
135 {
136         //QString name = QFileDialog::getOpenFileName(NULL, ResourceControl::getText("selectLogTitle"),
137         //  "", "Data log files (*\&.csv)");
138     QString name = "Hola";
139 
140     if (name != "")
141     {
142         QString line;
143         QStringList lineSplit;
144 
145         QFile file(name);
146 
147         if (file\&.open(QIODevice::ReadOnly))
148         {
149             QTextStream textStream(&file);
150             line = textStream\&.readLine();
151 
152             while (!textStream\&.atEnd())
153             {
154                 line = textStream\&.readLine();
155                 lineSplit = line\&.split(";");
156 
157                 m_aLatitude\&.push_back(lineSplit\&.at(1)\&.toDouble());
158                 m_aLongitude\&.push_back(lineSplit\&.at(2)\&.toDouble());
159                 m_aAltitude\&.push_back(lineSplit\&.at(3)\&.toDouble());
160                 m_aHeading\&.push_back(lineSplit\&.at(4)\&.toDouble());
161             }
162         }
163     }
164 }
.fi
.SS "void pause ()\fC [slot]\fP"

.PP
.nf
46 {
47     m_pReplayTimer\&.stop();
48 }
.fi
.SS "void replay ()\fC [slot]\fP"

.PP
.nf
95 {
96     if (m_bReverse == false)
97     {
98         if (m_iData > m_aLatitude\&.length())
99         {
100             stop();
101         }
102         else if (m_iData < m_aLatitude\&.length())
103         {
104             emit geolocation(m_aLatitude[m_iData], m_aLongitude[m_iData], m_aAltitude[m_iData], 0);
105             emit updateHeading(m_aHeading[m_iData]);
106 
107             m_iData++;
108         }
109         else
110         {
111             stop();
112         }
113     }
114     else
115     {
116         if (m_iData < 0)
117         {
118             stop();
119         }
120         else if (m_iData < m_aLatitude\&.length())
121         {
122             emit geolocation(m_aLatitude[m_iData], m_aLongitude[m_iData], m_aAltitude[m_iData], 0);
123             emit updateHeading(m_aHeading[m_iData]);
124 
125             m_iData--;
126         }
127         else
128         {
129             stop();
130         }
131     }
132 }
.fi
.SS "void start ()\fC [slot]\fP"

.PP
.nf
40 {
41     m_pReplayTimer\&.start(200);
42     CommunicationControl::getInstance()->stop();
43 }
.fi
.SS "void stop ()\fC [slot]\fP"

.PP
.nf
51 {
52     m_pReplayTimer\&.stop();
53 
54     m_iData = 0;
55     m_bReverse = false;
56 }
.fi
.SS "void updateHeading (doublep_pValue)\fC [signal]\fP"

.PP
Update heading value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp_pValue\fP heading value double 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.SH "Field Documentation"
.PP 
.SS "QList<double> m_aAltitude\fC [private]\fP"

.SS "QList<double> m_aHeading\fC [private]\fP"

.SS "QList<double> m_aLatitude\fC [private]\fP"

.SS "QList<double> m_aLongitude\fC [private]\fP"

.SS "bool m_bReverse\fC [private]\fP"

.SS "int m_iData\fC [private]\fP"

.SS "QTimer m_pReplayTimer\fC [private]\fP"

.SS "\fBLogReplayControl\fP * singleton = NULL\fC [static]\fP, \fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for MARCS from the source code\&.
