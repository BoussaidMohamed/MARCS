.TH "mission" 3 "Wed Sep 11 2013" "MARCS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mission \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'mission\&.h'\fP
.SS "Public Member Functions"
.SS "Data Fields"
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBmission\fP ()"

.PP
.nf
21 {
22 
23 }
.fi
.SS "\fBmission\fP (intnum)"

.PP
.nf
24                        : n_mission(num)
25 {
26 
27 
28 }
.fi
.SS "~\fBmission\fP ()"

.PP
.nf
30 {
31     myMission\&.~QList();
32 
33 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "int getNum ()"

.PP
.nf
35                    {
36     return n_mission ;
37 }
.fi
.SS "QList< \fBwaypoint\fP * > getWaypointList ()"

.PP
.nf
228                                           {
229     return myMission;
230 }
.fi
.SS "QList< \fBwaypoint\fP * > loadMission (QStringfilename)"

.PP
.nf
90                                                         {
91 
92 
93         QList < waypoint* > wpList ;
94     /* We'll parse the filename */
95         QFile* file = new QFile(filename);
96         int num  ;
97         double lon , lat ,alt , hdg ;
98         int time, type ;
99         bool ok = false ;
100 
101 
102         /* If we can't open it, let's show an error message\&. */
103         if (!file->open(QIODevice::ReadOnly | QIODevice::Text)) {
104 
105         }
106         /* QXmlStreamReader takes any QIODevice\&. */
107         QXmlStreamReader xml(file);
108         /* We'll parse the XML until we reach end of it\&.*/
109         while(!xml\&.atEnd() && !xml\&.hasError()) {
110             /* Read next element\&.*/
111             QXmlStreamReader::TokenType token = xml\&.readNext();
112             /* If token is just StartDocument, we'll go to next\&.*/
113             if(token == QXmlStreamReader::StartDocument) {
114                 continue;
115             }
116             /* If token is StartElement, we'll see if we can read it\&.*/
117             if(token == QXmlStreamReader::StartElement) {
118                 /* If it's named Mission, we'll go to the next\&.*/
119                 if(xml\&.name() == "Mission") {
120                     continue;
121                 }
122                 if(xml\&.name() == "Mission_Number") {
123                     continue;
124                 }
125                 /* If it's named Waypoint, we'll dig the information from there\&.*/
126                 if(xml\&.name() == "Waypoint") {
127 
128                     /* Next element\&.\&.\&. */
129                     xml\&.readNext();
130                     /*
131                      * We're going to loop over the things because the order might change\&.
132                      * We'll continue the loop until we hit an EndElement named Waypoint\&.
133                      */
134 
135                     while(!(xml\&.tokenType() == QXmlStreamReader::EndElement && xml\&.name() == "Waypoint")) {
136 
137 
138 
139                         if(xml\&.tokenType() == QXmlStreamReader::StartElement) {
140                             /* We've found Number\&. */
141                             if(xml\&.name() == "Number") {
142                                 num = xml\&.readElementText()\&.toInt(&ok,10);
143                             }
144                             /* We've found Longitude\&. */
145                             if(xml\&.name() == "Longitude") {
146                                 lon = xml\&.readElementText()\&.toDouble(&ok);
147 
148                             }
149                             /* We've found Latitude\&. */
150                             if(xml\&.name() == "Latitude") {
151                                 lat = xml\&.readElementText()\&.toDouble(&ok);
152 
153                             }
154                             /* We've found Altitude\&. */
155                             if(xml\&.name() == "Altitude") {
156                                 alt=xml\&.readElementText()\&.toDouble(&ok);
157                             }
158 
159                             /* We've found Heading\&. */
160                             if(xml\&.name() == "Heading") {
161                                 hdg = xml\&.readElementText()\&.toDouble(&ok);
162 
163                             }
164                             /* We've found Time\&. */
165                             if(xml\&.name() == "Time") {
166                                 time = xml\&.readElementText()\&.toInt(&ok,10);
167 
168                            }
169                             /* We've found Type\&. */
170                             if(xml\&.name() == "Type") {
171                                 type=xml\&.readElementText()\&.toInt(&ok,10);
172                             }
173                         }
174                         /* \&.\&.\&.and next\&.\&.\&. */
175                         xml\&.readNext();
176                     }
177                     wpList\&.append(new waypoint(num,lon,lat,alt,hdg,time,type,0));
178 
179                 }
180             }
181         }
182         /* Error handling\&. */
183         if(xml\&.hasError()) {
184 
185         }
186         /* Removes any device() or data from the reader
187          * and resets its internal state to the initial state\&. */
188         file->close();
189         xml\&.clear();
190 
191        return wpList;
192        delete file ;
193    }
.fi
.SS "void saveMission (QList< \fBwaypoint\fP * >wpList, QStringfileName)"

.PP
.nf
43                                                                       {
44 
45       time_t now1 = time (0);
46       struct tm * now2 = localtime( & now1);
47       string temp ;
48       char* time_mission = new char[32];
49       QString qs ;
50 
51       sprintf(time_mission,"%d_%d_%d_%d_%d",(now2->tm_year + 1900 ) ,(now2->tm_mon+1), (now2->tm_mday),(now2->tm_hour), (now2->tm_min));
52       temp = string(time_mission);
53        string time_mission_temp = "" + temp ;
54       qs = QString::fromStdString(time_mission_temp);
55 
56          QFile file(filename);
57          file\&.open(QIODevice::WriteOnly);
58 
59          QXmlStreamWriter xmlWriter(&file);
60          xmlWriter\&.setAutoFormatting(true);
61          xmlWriter\&.writeStartDocument();
62 
63          xmlWriter\&.writeStartElement("Mission");
64          xmlWriter\&.writeTextElement("Mission_Number",qs);
65 
66          for ( int i = 0 ; i < wpList\&.size(); i++ ) {
67 
68         xmlWriter\&.writeStartElement("Waypoint");
69         xmlWriter\&.writeTextElement("Number",QString::number(wpList[i]->getNum()));
70         xmlWriter\&.writeTextElement("Longitude",QString::number(wpList[i]->getLong(),'g',6));
71         xmlWriter\&.writeTextElement("Latitude",QString::number(wpList[i]->getLat(),'g',6));
72         xmlWriter\&.writeTextElement("Altitude",QString::number(wpList[i]->getAlt()));
73         xmlWriter\&.writeTextElement("Heading",QString::number(wpList[i]->getHdg()));
74         xmlWriter\&.writeTextElement("Time",QString::number(wpList[i]->getTime()));
75         xmlWriter\&.writeTextElement("Type",QString::number(wpList[i]->getType()));
76         xmlWriter\&.writeEndElement();
77 
78          }
79 
80          xmlWriter\&.writeEndElement();
81          xmlWriter\&.writeEndDocument();
82 
83          file\&.close();
84 
85          delete[] time_mission;
86 
87 }
.fi
.SS "void saveMissionKml (QList< \fBwaypoint\fP * >wpList, QStringfileName)"

.PP
.nf
195                                                                       {
196 
197     QFile file(fileName);
198     file\&.open(QIODevice::WriteOnly);
199 
200     QXmlStreamWriter xmlWriter(&file);
201     xmlWriter\&.setAutoFormatting(true);
202     xmlWriter\&.writeStartDocument();
203 
204     xmlWriter\&.writeStartElement("kml");
205     xmlWriter\&.writeAttribute("xmlns","http://earth\&.google\&.com/kml/2\&.2");
206     xmlWriter\&.writeStartElement("Folder");
207     xmlWriter\&.writeTextElement("name","Mission MARCS");
208 
209     for ( int i = 0 ; i < wpList\&.size(); i++ ) {
210 
211    xmlWriter\&.writeStartElement("Placemark");
212    xmlWriter\&.writeTextElement("name",QString::number(wpList[i]->getNum()));
213    xmlWriter\&.writeStartElement("Point");
214    xmlWriter\&.writeTextElement("coordinates",QString::number(wpList[i]->getLong(),'g',6)+","+QString::number(wpList[i]->getLat(),'g',6));
215     xmlWriter\&.writeEndElement();
216     xmlWriter\&.writeEndElement();
217     }
218 
219     xmlWriter\&.writeEndElement();
220     xmlWriter\&.writeEndElement();
221     xmlWriter\&.writeEndDocument();
222 
223     file\&.close();
224 
225 
226 }
.fi
.SS "void setNum (intn)"

.PP
.nf
39                          {
40     n_mission = n ;
41 }
.fi
.SS "void setWaypointList (QList< \fBwaypoint\fP * >mission)"

.PP
.nf
232                                                       {
233     myMission = mission;
234 }
.fi
.SH "Field Documentation"
.PP 
.SS "QList<\fBwaypoint\fP* > myMission"

.SS "int n_mission"


.SH "Author"
.PP 
Generated automatically by Doxygen for MARCS from the source code\&.
