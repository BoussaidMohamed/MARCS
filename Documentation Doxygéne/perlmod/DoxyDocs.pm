$doxydocs=
{
  classes => [
    {
      name => 'CommunicationControl',
      base => [
        {
          name => 'QObject',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'CommunicationControl.h'
      },
      all_members => [
        {
          name => 'altitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'autonomousMode',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'batteryLevel',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'CommunicationControl',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'computePolledData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'computerAidedControlMode',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'comThread',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'controlWaypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'crc16',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'crc_update',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'createLog',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'cw',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'displayAck',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'geolocation',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'getInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'getLogger',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'gps',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'heading',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'height',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'imu',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'inFlight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'kill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'latitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'log',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'longitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'm_dSpeed',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'm_nLinkTries',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'm_pPollTimeout',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'm_pPollTimer',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'm_pRetryTimer',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'm_sCom',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'poll',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'pollData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'pollDataTimedOut',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'rc',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'rcData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'retryConnection',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'sendGoTo',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'sendHome',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'sendLand',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'sendLaunch',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'sendMotOff',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'sendMotOn',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'sendMove',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'sendWaypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'singleton',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'st',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        },
        {
          name => 'start',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'stop',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'updateGPSQuality',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'updateHeading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'updateHeight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'updateSpeed',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'updateStatus',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'validWaypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'waypointNAVInfo',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'writeLog',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'XBeeDisconnected',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'XBeeReconnected',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => 'XBeeStatus',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CommunicationControl'
        },
        {
          name => '~CommunicationControl',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'CommunicationControl'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'crc16',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Compute crc. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'unsigned short',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'data',
                type => 'void *'
              },
              {
                declaration_name => 'cnt',
                type => 'unsigned short'
              }
            ]
          },
          {
            kind => 'function',
            name => 'crc_update',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update crc. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'unsigned short',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'crc',
                type => 'unsigned short'
              },
              {
                declaration_name => 'data',
                type => 'unsigned char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'createLog',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Create logger. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getLogger',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Logger getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'logger UAVLogger* '
                    }
                  ]
                }
              ]
            },
            type => 'UAVLogger *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'start',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Start communication. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_sCom',
                type => 'QString'
              }
            ]
          },
          {
            kind => 'function',
            name => 'stop',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Stop communication. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'writeLog',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Write logs. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'validCrc'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'valid crc state bool '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'validCrc',
                type => 'bool'
              }
            ]
          }
        ]
      },
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'autonomousMode',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Poll data (timed) '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'computePolledData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Polled data to be sent to other modules. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'data'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'polled data char* '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'length'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'length in char of the polled data int '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'data',
                type => 'char *'
              },
              {
                declaration_name => 'length',
                type => 'int'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'computerAidedControlMode',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Poll data (timed) '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'controlWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Control the given waypoint validity. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'xDest'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'longitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'yDest'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'latitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'zDest'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'xDest',
                type => 'double'
              },
              {
                declaration_name => 'yDest',
                type => 'double'
              },
              {
                declaration_name => 'zDest',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'pollData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Poll data (timed) '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'pollDataTimedOut',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Data poll timedout. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'retryConnection',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Retry connection (timed) '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      signals => {
        members => [
          {
            kind => 'signal',
            name => 'batteryLevel',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Battery level. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'battery voltage double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dValue',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'displayAck',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update acknowledge value. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'data'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'received acknowledge char* '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'data',
                type => 'char *'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'geolocation',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Update MUAV geolocation. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'x'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'longitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'y'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'latitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'z'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'yaw'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'latitude',
                type => 'double'
              },
              {
                declaration_name => 'longitude',
                type => 'double'
              },
              {
                declaration_name => 'altitude',
                type => 'double'
              },
              {
                declaration_name => 'heading',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'inFlight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update flight state. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_cValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'flight in progress (engines started) char '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_cValue',
                type => 'char'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'poll',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Poll data. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'dataToPoll'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'data to poll unsigned short '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dataToPoll',
                type => 'unsigned short'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'rcData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update remote control data. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'yaw'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'pitch'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'roll'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'thrust'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'serial'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'GPSHeightControl'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'valid'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'char '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'yaw',
                type => 'short'
              },
              {
                declaration_name => 'pitch',
                type => 'short'
              },
              {
                declaration_name => 'roll',
                type => 'short'
              },
              {
                declaration_name => 'thrust',
                type => 'short'
              },
              {
                declaration_name => 'serial',
                type => 'short'
              },
              {
                declaration_name => 'GPSHeightControl',
                type => 'short'
              },
              {
                declaration_name => 'valid',
                type => 'char'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'sendGoTo',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send go to order. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'sendHome',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send come home order. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'sendLand',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send land order. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'sendLaunch',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send launch (define home) order. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'sendMotOff',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Send stop engines order. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'sendMotOn',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send start engines order. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'sendMove',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Relative move to send. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'x'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'x axe move in meters double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'y'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'y axe move in meters double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'z'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'z axe move in meters double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'yaw'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'heading value in degrees double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'x',
                type => 'double'
              },
              {
                declaration_name => 'y',
                type => 'double'
              },
              {
                declaration_name => 'z',
                type => 'double'
              },
              {
                declaration_name => 'yaw',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'sendWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' to send. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'x'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'longitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'y'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'latitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'z'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'yaw'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'x',
                type => 'double'
              },
              {
                declaration_name => 'y',
                type => 'double'
              },
              {
                declaration_name => 'z',
                type => 'double'
              },
              {
                declaration_name => 'yaw',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'updateGPSQuality',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'GPS qualtity. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_iSatellite'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'number of get satellites int '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_iSatellite',
                type => 'int'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'updateHeading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update heading value. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'heading value double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'updateHeight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update height value. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'heading value double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'updateSpeed',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update speed value. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'speed'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dSpeed',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'updateStatus',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'MUAV internal state. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'MUAV status short '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dValue',
                type => 'short'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'validWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Define if the waypoint is valid. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'dist'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'distance between the 2 waypoints double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'validLatLong'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'valid coordinates bool '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'validAltitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'valid altitude bool '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dist',
                type => 'double'
              },
              {
                declaration_name => 'validLatLong',
                type => 'bool'
              },
              {
                declaration_name => 'validAltitude',
                type => 'bool'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'waypointNAVInfo',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' navigation state. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_cWaypointNumber'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'waypoint number char '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_nDistance'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'between MUAV and waypoint short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_cStatus'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'navigation status (reached or not) short '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_cWaypointNumber',
                type => 'char'
              },
              {
                declaration_name => 'p_nDistance',
                type => 'short'
              },
              {
                declaration_name => 'p_cStatus',
                type => 'short'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'XBeeDisconnected',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'XBee physically disconnected. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'XBeeReconnected',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'XBee physically reconnected. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'XBeeStatus',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update XBee connection status. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_bValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'status bool '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_bValue',
                type => 'bool'
              }
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'getInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Lone instance getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'lone instance CommunicationControl* '
                    }
                  ]
                }
              ]
            },
            type => 'static CommunicationControl *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'kill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Instance killer. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'static void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'CommunicationControl',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd8/d84/a00001',
                      content => 'CommunicationControl'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~CommunicationControl',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'altitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'comThread',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'ComThread *'
          },
          {
            kind => 'variable',
            name => 'cw',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CURRENT_WAY'
          },
          {
            kind => 'variable',
            name => 'gps',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GPS_DATA_ADVANCED'
          },
          {
            kind => 'variable',
            name => 'heading',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'height',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'imu',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'IMU_CALCDATA'
          },
          {
            kind => 'variable',
            name => 'latitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'log',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UAVLogger *'
          },
          {
            kind => 'variable',
            name => 'longitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_dSpeed',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_nLinkTries',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'm_pPollTimeout',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTimer'
          },
          {
            kind => 'variable',
            name => 'm_pPollTimer',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTimer'
          },
          {
            kind => 'variable',
            name => 'm_pRetryTimer',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTimer'
          },
          {
            kind => 'variable',
            name => 'm_sCom',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'rc',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RC_DATA'
          },
          {
            kind => 'variable',
            name => 'st',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LL_STATUS'
          }
        ]
      },
      private_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'singleton',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static CommunicationControl *',
            initializer => '= NULL'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'ComThread',
      base => [
        {
          name => 'QThread',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'ComThread.h'
      },
      all_members => [
        {
          name => 'buffer',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'clearCounters',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'command',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'ComThread',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'createCom',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'dataReceived',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'dataToPoll',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'dcb',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'failed',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'failNoticed',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'handle',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'mustPoll',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'mustRead',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'mustWrite',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'poll',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'releaseCom',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'run',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'sendGoTo',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'sendHome',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'sendLand',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'sendLaunch',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'sendMotOff',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'sendMotOn',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'sendMove',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'sendWaypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'sizePoll',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'sizeRead',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'sizeWrite',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'timerFail',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'wp',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'ComThread'
        },
        {
          name => 'XBeeDisconnected',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => 'XBeeReconnected',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        },
        {
          name => '~ComThread',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'ComThread'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'ComThread',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd7/d46/a00002',
                      content => 'ComThread'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~ComThread',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'clearCounters',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Reset all counters. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'createCom',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Create the COM port handler. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_sCom'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'COM port name QString '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_sCom',
                type => 'QString'
              }
            ]
          },
          {
            kind => 'function',
            name => 'releaseCom',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destruct the COM port handler. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'run',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'QThread run override. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'poll',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Poll data slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'pDataToPoll'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'data packet to poll descriptor unsigned short '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pDataToPoll',
                type => 'unsigned short'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'sendGoTo',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send go to order slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'sendHome',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send come home order slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'sendLand',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send land order slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'sendLaunch',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send launch (define home) order slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'sendMotOff',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send stop engines order slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'sendMotOn',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send start engines order slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'sendMove',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send relative waypoint slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'x'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'x axe move reference double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'y'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'y axe move reference double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'z'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'z axe move reference double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'yaw'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'heading reference double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'x',
                type => 'double'
              },
              {
                declaration_name => 'y',
                type => 'double'
              },
              {
                declaration_name => 'z',
                type => 'double'
              },
              {
                declaration_name => 'yaw',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'sendWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send waypoint slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'x'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'longitude reference double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'y'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'latitude reference double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'z'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude reference double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'number'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'waypoint number double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'x',
                type => 'double'
              },
              {
                declaration_name => 'y',
                type => 'double'
              },
              {
                declaration_name => 'z',
                type => 'double'
              },
              {
                declaration_name => 'number',
                type => 'double'
              }
            ]
          }
        ]
      },
      signals => {
        members => [
          {
            kind => 'signal',
            name => 'dataReceived',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Data received event signal. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'buffer'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'reception buffer char* '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'length'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'number of received char int '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'buffer',
                type => 'char *'
              },
              {
                declaration_name => 'length',
                type => 'int'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'XBeeDisconnected',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'XBee physically disconnected. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'XBeeReconnected',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'XBee physically reconnected. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'buffer',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char',
            arguments => '[RX_SIZE]'
          },
          {
            kind => 'variable',
            name => 'command',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char',
            arguments => '[TX_SIZE]'
          },
          {
            kind => 'variable',
            name => 'dataToPoll',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char',
            arguments => '[10]'
          },
          {
            kind => 'variable',
            name => 'dcb',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DCB'
          },
          {
            kind => 'variable',
            name => 'failed',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'failNoticed',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'handle',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'HANDLE'
          },
          {
            kind => 'variable',
            name => 'mustPoll',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'mustRead',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'mustWrite',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'sizePoll',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'sizeRead',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned long'
          },
          {
            kind => 'variable',
            name => 'sizeWrite',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'timerFail',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTimer'
          },
          {
            kind => 'variable',
            name => 'wp',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WAYPOINT'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'CPOINT',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwLog',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CPOINT'
        },
        {
          name => 'lP',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CPOINT'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwLog',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'lP',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'CURRENT_WAY',
      includes => {
        local => 'yes',
        name => 'ComThread.h'
      },
      all_members => [
        {
          name => 'current_wp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CURRENT_WAY'
        },
        {
          name => 'current_wp_memlocation',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CURRENT_WAY'
        },
        {
          name => 'distance_to_wp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CURRENT_WAY'
        },
        {
          name => 'dummy1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CURRENT_WAY'
        },
        {
          name => 'dummy2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CURRENT_WAY'
        },
        {
          name => 'navigation_status',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CURRENT_WAY'
        },
        {
          name => 'nr_of_wp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CURRENT_WAY'
        },
        {
          name => 'properties',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CURRENT_WAY'
        },
        {
          name => 'status',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'CURRENT_WAY'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'current_wp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'variable',
            name => 'current_wp_memlocation',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'variable',
            name => 'distance_to_wp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short'
          },
          {
            kind => 'variable',
            name => 'dummy1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'variable',
            name => 'dummy2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'variable',
            name => 'navigation_status',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short'
          },
          {
            kind => 'variable',
            name => 'nr_of_wp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short'
          },
          {
            kind => 'variable',
            name => 'properties',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'variable',
            name => 'status',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIACTIONA',
      inner => [
        {
          name => 'DIACTIONA::@0'
        }
      ],
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => '@1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONA'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONA'
        },
        {
          name => 'dwHow',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONA'
        },
        {
          name => 'dwObjID',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONA'
        },
        {
          name => 'dwSemantic',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONA'
        },
        {
          name => 'guidInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONA'
        },
        {
          name => 'uAppData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => '@1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL union DIACTIONA::@0'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL DWORD'
          },
          {
            kind => 'variable',
            name => 'dwHow',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL DWORD'
          },
          {
            kind => 'variable',
            name => 'dwObjID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSemantic',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL GUID'
          },
          {
            kind => 'variable',
            name => 'uAppData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT_PTR'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIACTIONA.__unnamed__',
      all_members => [
        {
          name => 'lptszActionName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONA.__unnamed__'
        },
        {
          name => 'uResIdString',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONA.__unnamed__'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'lptszActionName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPCSTR'
          },
          {
            kind => 'variable',
            name => 'uResIdString',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIACTIONFORMATA',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwActionSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'dwBufferSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'dwCRC',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'dwDataSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'dwGenre',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'dwNumActions',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'ftTimeStamp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'guidActionMap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'hInstString',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'lAxisMax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'lAxisMin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'rgoAction',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        },
        {
          name => 'tszActionMap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwActionSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwBufferSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwCRC',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwDataSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwGenre',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwNumActions',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'ftTimeStamp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'FILETIME'
          },
          {
            kind => 'variable',
            name => 'guidActionMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'hInstString',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL HINSTANCE'
          },
          {
            kind => 'variable',
            name => 'lAxisMax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL LONG'
          },
          {
            kind => 'variable',
            name => 'lAxisMin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL LONG'
          },
          {
            kind => 'variable',
            name => 'rgoAction',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIACTIONA'
          },
          {
            kind => 'variable',
            name => 'tszActionMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIACTIONFORMATW',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwActionSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'dwBufferSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'dwCRC',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'dwDataSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'dwGenre',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'dwNumActions',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'ftTimeStamp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'guidActionMap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'hInstString',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'lAxisMax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'lAxisMin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'rgoAction',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        },
        {
          name => 'tszActionMap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONFORMATW'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwActionSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwBufferSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwCRC',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwDataSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwGenre',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwNumActions',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'ftTimeStamp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'FILETIME'
          },
          {
            kind => 'variable',
            name => 'guidActionMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'hInstString',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL HINSTANCE'
          },
          {
            kind => 'variable',
            name => 'lAxisMax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL LONG'
          },
          {
            kind => 'variable',
            name => 'lAxisMin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL LONG'
          },
          {
            kind => 'variable',
            name => 'rgoAction',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIACTIONW'
          },
          {
            kind => 'variable',
            name => 'tszActionMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIACTIONW',
      inner => [
        {
          name => 'DIACTIONW::@2'
        }
      ],
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => '@3',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONW'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONW'
        },
        {
          name => 'dwHow',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONW'
        },
        {
          name => 'dwObjID',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONW'
        },
        {
          name => 'dwSemantic',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONW'
        },
        {
          name => 'guidInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONW'
        },
        {
          name => 'uAppData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONW'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => '@3',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL union DIACTIONW::@2'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL DWORD'
          },
          {
            kind => 'variable',
            name => 'dwHow',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL DWORD'
          },
          {
            kind => 'variable',
            name => 'dwObjID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSemantic',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'OPTIONAL GUID'
          },
          {
            kind => 'variable',
            name => 'uAppData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT_PTR'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIACTIONW.__unnamed__',
      all_members => [
        {
          name => 'lptszActionName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONW.__unnamed__'
        },
        {
          name => 'uResIdString',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIACTIONW.__unnamed__'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'lptszActionName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPCWSTR'
          },
          {
            kind => 'variable',
            name => 'uResIdString',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DICOLORSET',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'cAreaFill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICOLORSET'
        },
        {
          name => 'cBorder',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICOLORSET'
        },
        {
          name => 'cCalloutHighlight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICOLORSET'
        },
        {
          name => 'cCalloutLine',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICOLORSET'
        },
        {
          name => 'cControlFill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICOLORSET'
        },
        {
          name => 'cHighlightFill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICOLORSET'
        },
        {
          name => 'cTextFore',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICOLORSET'
        },
        {
          name => 'cTextHighlight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICOLORSET'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICOLORSET'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'cAreaFill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'D3DCOLOR'
          },
          {
            kind => 'variable',
            name => 'cBorder',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'D3DCOLOR'
          },
          {
            kind => 'variable',
            name => 'cCalloutHighlight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'D3DCOLOR'
          },
          {
            kind => 'variable',
            name => 'cCalloutLine',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'D3DCOLOR'
          },
          {
            kind => 'variable',
            name => 'cControlFill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'D3DCOLOR'
          },
          {
            kind => 'variable',
            name => 'cHighlightFill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'D3DCOLOR'
          },
          {
            kind => 'variable',
            name => 'cTextFore',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'D3DCOLOR'
          },
          {
            kind => 'variable',
            name => 'cTextHighlight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'D3DCOLOR'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DICONDITION',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwNegativeSaturation',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONDITION'
        },
        {
          name => 'dwPositiveSaturation',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONDITION'
        },
        {
          name => 'lDeadBand',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONDITION'
        },
        {
          name => 'lNegativeCoefficient',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONDITION'
        },
        {
          name => 'lOffset',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONDITION'
        },
        {
          name => 'lPositiveCoefficient',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONDITION'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwNegativeSaturation',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwPositiveSaturation',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'lDeadBand',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lNegativeCoefficient',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lOffset',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lPositiveCoefficient',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DICONFIGUREDEVICESPARAMSA',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dics',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSA'
        },
        {
          name => 'dwcFormats',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSA'
        },
        {
          name => 'dwcUsers',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSA'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSA'
        },
        {
          name => 'hwnd',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSA'
        },
        {
          name => 'lprgFormats',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSA'
        },
        {
          name => 'lptszUserNames',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSA'
        },
        {
          name => 'lpUnkDDSTarget',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dics',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DICOLORSET'
          },
          {
            kind => 'variable',
            name => 'dwcFormats',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcUsers',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'hwnd',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'HWND'
          },
          {
            kind => 'variable',
            name => 'lprgFormats',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIACTIONFORMATA'
          },
          {
            kind => 'variable',
            name => 'lptszUserNames',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPSTR'
          },
          {
            kind => 'variable',
            name => 'lpUnkDDSTarget',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'IUnknown FAR *'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DICONFIGUREDEVICESPARAMSW',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dics',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSW'
        },
        {
          name => 'dwcFormats',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSW'
        },
        {
          name => 'dwcUsers',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSW'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSW'
        },
        {
          name => 'hwnd',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSW'
        },
        {
          name => 'lprgFormats',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSW'
        },
        {
          name => 'lptszUserNames',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSW'
        },
        {
          name => 'lpUnkDDSTarget',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONFIGUREDEVICESPARAMSW'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dics',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DICOLORSET'
          },
          {
            kind => 'variable',
            name => 'dwcFormats',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcUsers',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'hwnd',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'HWND'
          },
          {
            kind => 'variable',
            name => 'lprgFormats',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIACTIONFORMATW'
          },
          {
            kind => 'variable',
            name => 'lptszUserNames',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPWSTR'
          },
          {
            kind => 'variable',
            name => 'lpUnkDDSTarget',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'IUnknown FAR *'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DICONSTANTFORCE',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'lMagnitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICONSTANTFORCE'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'lMagnitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DICUSTOMFORCE',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'cChannels',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICUSTOMFORCE'
        },
        {
          name => 'cSamples',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICUSTOMFORCE'
        },
        {
          name => 'dwSamplePeriod',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICUSTOMFORCE'
        },
        {
          name => 'rglForceData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DICUSTOMFORCE'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'cChannels',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'cSamples',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSamplePeriod',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'rglForceData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPLONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDATAFORMAT',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwDataSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDATAFORMAT'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDATAFORMAT'
        },
        {
          name => 'dwNumObjs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDATAFORMAT'
        },
        {
          name => 'dwObjSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDATAFORMAT'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDATAFORMAT'
        },
        {
          name => 'rgodf',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDATAFORMAT'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwDataSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwNumObjs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwObjSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'rgodf',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIOBJECTDATAFORMAT'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVCAPS',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwAxes',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwButtons',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwDevType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwFFDriverVersion',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwFFMinTimeResolution',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwFFSamplePeriod',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwFirmwareRevision',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwHardwareRevision',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwPOVs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwAxes',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwButtons',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwDevType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFFDriverVersion',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFFMinTimeResolution',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFFSamplePeriod',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFirmwareRevision',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwHardwareRevision',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwPOVs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVCAPS_DX3',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwAxes',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS_DX3'
        },
        {
          name => 'dwButtons',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS_DX3'
        },
        {
          name => 'dwDevType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS_DX3'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS_DX3'
        },
        {
          name => 'dwPOVs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS_DX3'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVCAPS_DX3'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwAxes',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwButtons',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwDevType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwPOVs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEIMAGEINFOA',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwcValidPts',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOA'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOA'
        },
        {
          name => 'dwObjID',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOA'
        },
        {
          name => 'dwTextAlign',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOA'
        },
        {
          name => 'dwViewID',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOA'
        },
        {
          name => 'rcCalloutRect',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOA'
        },
        {
          name => 'rcOverlay',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOA'
        },
        {
          name => 'rgptCalloutLine',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOA'
        },
        {
          name => 'tszImagePath',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwcValidPts',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwObjID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwTextAlign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwViewID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'rcCalloutRect',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RECT'
          },
          {
            kind => 'variable',
            name => 'rcOverlay',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RECT'
          },
          {
            kind => 'variable',
            name => 'rgptCalloutLine',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'POINT',
            arguments => '[5]'
          },
          {
            kind => 'variable',
            name => 'tszImagePath',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEIMAGEINFOHEADERA',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwBufferSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERA'
        },
        {
          name => 'dwBufferUsed',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERA'
        },
        {
          name => 'dwcAxes',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERA'
        },
        {
          name => 'dwcButtons',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERA'
        },
        {
          name => 'dwcPOVs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERA'
        },
        {
          name => 'dwcViews',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERA'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERA'
        },
        {
          name => 'dwSizeImageInfo',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERA'
        },
        {
          name => 'lprgImageInfoArray',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwBufferSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwBufferUsed',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcAxes',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcButtons',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcPOVs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcViews',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSizeImageInfo',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'lprgImageInfoArray',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIDEVICEIMAGEINFOA'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEIMAGEINFOHEADERW',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwBufferSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERW'
        },
        {
          name => 'dwBufferUsed',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERW'
        },
        {
          name => 'dwcAxes',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERW'
        },
        {
          name => 'dwcButtons',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERW'
        },
        {
          name => 'dwcPOVs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERW'
        },
        {
          name => 'dwcViews',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERW'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERW'
        },
        {
          name => 'dwSizeImageInfo',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERW'
        },
        {
          name => 'lprgImageInfoArray',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOHEADERW'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwBufferSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwBufferUsed',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcAxes',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcButtons',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcPOVs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwcViews',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSizeImageInfo',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'lprgImageInfoArray',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIDEVICEIMAGEINFOW'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEIMAGEINFOW',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwcValidPts',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOW'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOW'
        },
        {
          name => 'dwObjID',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOW'
        },
        {
          name => 'dwTextAlign',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOW'
        },
        {
          name => 'dwViewID',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOW'
        },
        {
          name => 'rcCalloutRect',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOW'
        },
        {
          name => 'rcOverlay',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOW'
        },
        {
          name => 'rgptCalloutLine',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOW'
        },
        {
          name => 'tszImagePath',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEIMAGEINFOW'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwcValidPts',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwObjID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwTextAlign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwViewID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'rcCalloutRect',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RECT'
          },
          {
            kind => 'variable',
            name => 'rcOverlay',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RECT'
          },
          {
            kind => 'variable',
            name => 'rgptCalloutLine',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'POINT',
            arguments => '[5]'
          },
          {
            kind => 'variable',
            name => 'tszImagePath',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEINSTANCE_DX3A',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwDevType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3A'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3A'
        },
        {
          name => 'guidInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3A'
        },
        {
          name => 'guidProduct',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3A'
        },
        {
          name => 'tszInstanceName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3A'
        },
        {
          name => 'tszProductName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3A'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwDevType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'guidProduct',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszInstanceName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          },
          {
            kind => 'variable',
            name => 'tszProductName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEINSTANCE_DX3W',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwDevType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3W'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3W'
        },
        {
          name => 'guidInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3W'
        },
        {
          name => 'guidProduct',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3W'
        },
        {
          name => 'tszInstanceName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3W'
        },
        {
          name => 'tszProductName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCE_DX3W'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwDevType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'guidProduct',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszInstanceName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          },
          {
            kind => 'variable',
            name => 'tszProductName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEINSTANCEA',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwDevType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEA'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEA'
        },
        {
          name => 'guidFFDriver',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEA'
        },
        {
          name => 'guidInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEA'
        },
        {
          name => 'guidProduct',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEA'
        },
        {
          name => 'tszInstanceName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEA'
        },
        {
          name => 'tszProductName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEA'
        },
        {
          name => 'wUsage',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEA'
        },
        {
          name => 'wUsagePage',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwDevType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidFFDriver',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'guidInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'guidProduct',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszInstanceName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          },
          {
            kind => 'variable',
            name => 'tszProductName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          },
          {
            kind => 'variable',
            name => 'wUsage',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wUsagePage',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEINSTANCEW',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwDevType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEW'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEW'
        },
        {
          name => 'guidFFDriver',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEW'
        },
        {
          name => 'guidInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEW'
        },
        {
          name => 'guidProduct',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEW'
        },
        {
          name => 'tszInstanceName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEW'
        },
        {
          name => 'tszProductName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEW'
        },
        {
          name => 'wUsage',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEW'
        },
        {
          name => 'wUsagePage',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEINSTANCEW'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwDevType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidFFDriver',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'guidInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'guidProduct',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszInstanceName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          },
          {
            kind => 'variable',
            name => 'tszProductName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          },
          {
            kind => 'variable',
            name => 'wUsage',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wUsagePage',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEOBJECTDATA',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTDATA'
        },
        {
          name => 'dwOfs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTDATA'
        },
        {
          name => 'dwSequence',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTDATA'
        },
        {
          name => 'dwTimeStamp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTDATA'
        },
        {
          name => 'uAppData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTDATA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwOfs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSequence',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwTimeStamp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'uAppData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT_PTR'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEOBJECTDATA_DX3',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTDATA_DX3'
        },
        {
          name => 'dwOfs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTDATA_DX3'
        },
        {
          name => 'dwSequence',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTDATA_DX3'
        },
        {
          name => 'dwTimeStamp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTDATA_DX3'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwOfs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSequence',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwTimeStamp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEOBJECTINSTANCE_DX3A',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3A'
        },
        {
          name => 'dwOfs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3A'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3A'
        },
        {
          name => 'dwType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3A'
        },
        {
          name => 'guidType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3A'
        },
        {
          name => 'tszName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3A'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwOfs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEOBJECTINSTANCE_DX3W',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3W'
        },
        {
          name => 'dwOfs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3W'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3W'
        },
        {
          name => 'dwType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3W'
        },
        {
          name => 'guidType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3W'
        },
        {
          name => 'tszName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCE_DX3W'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwOfs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEOBJECTINSTANCEA',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwDimension',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'dwFFForceResolution',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'dwFFMaxForce',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'dwOfs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'dwType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'guidType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'tszName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'wCollectionNumber',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'wDesignatorIndex',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'wExponent',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'wReportId',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'wUsage',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        },
        {
          name => 'wUsagePage',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwDimension',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFFForceResolution',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFFMaxForce',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwOfs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          },
          {
            kind => 'variable',
            name => 'wCollectionNumber',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wDesignatorIndex',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wExponent',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wReportId',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wUsage',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wUsagePage',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIDEVICEOBJECTINSTANCEW',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwDimension',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'dwFFForceResolution',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'dwFFMaxForce',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'dwOfs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'dwType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'guidType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'tszName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'wCollectionNumber',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'wDesignatorIndex',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'wExponent',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'wReportId',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'wUsage',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        },
        {
          name => 'wUsagePage',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIDEVICEOBJECTINSTANCEW'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwDimension',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFFForceResolution',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFFMaxForce',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwOfs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guidType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          },
          {
            kind => 'variable',
            name => 'wCollectionNumber',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wDesignatorIndex',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wExponent',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wReportId',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wUsage',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          },
          {
            kind => 'variable',
            name => 'wUsagePage',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIEFFECT',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'cAxes',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'cbTypeSpecificParams',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'dwDuration',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'dwGain',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'dwSamplePeriod',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'dwStartDelay',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'dwTriggerButton',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'dwTriggerRepeatInterval',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'lpEnvelope',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'lpvTypeSpecificParams',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'rgdwAxes',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        },
        {
          name => 'rglDirection',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'cAxes',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'cbTypeSpecificParams',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwDuration',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwGain',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSamplePeriod',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwStartDelay',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwTriggerButton',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwTriggerRepeatInterval',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'lpEnvelope',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIENVELOPE'
          },
          {
            kind => 'variable',
            name => 'lpvTypeSpecificParams',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPVOID'
          },
          {
            kind => 'variable',
            name => 'rgdwAxes',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDWORD'
          },
          {
            kind => 'variable',
            name => 'rglDirection',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPLONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIEFFECT_DX5',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'cAxes',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'cbTypeSpecificParams',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'dwDuration',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'dwGain',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'dwSamplePeriod',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'dwTriggerButton',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'dwTriggerRepeatInterval',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'lpEnvelope',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'lpvTypeSpecificParams',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'rgdwAxes',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        },
        {
          name => 'rglDirection',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECT_DX5'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'cAxes',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'cbTypeSpecificParams',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwDuration',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwGain',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSamplePeriod',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwTriggerButton',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwTriggerRepeatInterval',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'lpEnvelope',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIENVELOPE'
          },
          {
            kind => 'variable',
            name => 'lpvTypeSpecificParams',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPVOID'
          },
          {
            kind => 'variable',
            name => 'rgdwAxes',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDWORD'
          },
          {
            kind => 'variable',
            name => 'rglDirection',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPLONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIEFFECTINFOA',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwDynamicParams',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOA'
        },
        {
          name => 'dwEffType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOA'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOA'
        },
        {
          name => 'dwStaticParams',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOA'
        },
        {
          name => 'guid',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOA'
        },
        {
          name => 'tszName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwDynamicParams',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwEffType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwStaticParams',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guid',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIEFFECTINFOW',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwDynamicParams',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOW'
        },
        {
          name => 'dwEffType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOW'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOW'
        },
        {
          name => 'dwStaticParams',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOW'
        },
        {
          name => 'guid',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOW'
        },
        {
          name => 'tszName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFECTINFOW'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwDynamicParams',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwEffType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwStaticParams',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'guid',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'tszName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIEFFESCAPE',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'cbInBuffer',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFESCAPE'
        },
        {
          name => 'cbOutBuffer',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFESCAPE'
        },
        {
          name => 'dwCommand',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFESCAPE'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFESCAPE'
        },
        {
          name => 'lpvInBuffer',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFESCAPE'
        },
        {
          name => 'lpvOutBuffer',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIEFFESCAPE'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'cbInBuffer',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'cbOutBuffer',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwCommand',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'lpvInBuffer',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPVOID'
          },
          {
            kind => 'variable',
            name => 'lpvOutBuffer',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPVOID'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIENVELOPE',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwAttackLevel',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIENVELOPE'
        },
        {
          name => 'dwAttackTime',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIENVELOPE'
        },
        {
          name => 'dwFadeLevel',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIENVELOPE'
        },
        {
          name => 'dwFadeTime',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIENVELOPE'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIENVELOPE'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwAttackLevel',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwAttackTime',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFadeLevel',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwFadeTime',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIFILEEFFECT',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIFILEEFFECT'
        },
        {
          name => 'GuidEffect',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIFILEEFFECT'
        },
        {
          name => 'lpDiEffect',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIFILEEFFECT'
        },
        {
          name => 'szFriendlyName',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIFILEEFFECT'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'GuidEffect',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'lpDiEffect',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPCDIEFFECT'
          },
          {
            kind => 'variable',
            name => 'szFriendlyName',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIJOYSTATE',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'lRx',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE'
        },
        {
          name => 'lRy',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE'
        },
        {
          name => 'lRz',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE'
        },
        {
          name => 'lX',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE'
        },
        {
          name => 'lY',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE'
        },
        {
          name => 'lZ',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE'
        },
        {
          name => 'rgbButtons',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE'
        },
        {
          name => 'rgdwPOV',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE'
        },
        {
          name => 'rglSlider',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'lRx',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lRy',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lRz',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lY',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lZ',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'rgbButtons',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'BYTE',
            arguments => '[32]'
          },
          {
            kind => 'variable',
            name => 'rgdwPOV',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD',
            arguments => '[4]'
          },
          {
            kind => 'variable',
            name => 'rglSlider',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG',
            arguments => '[2]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIJOYSTATE2',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'lARx',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lARy',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lARz',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lAX',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lAY',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lAZ',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lFRx',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lFRy',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lFRz',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lFX',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lFY',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lFZ',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lRx',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lRy',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lRz',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lVRx',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lVRy',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lVRz',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lVX',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lVY',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lVZ',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lX',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lY',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'lZ',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'rgbButtons',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'rgdwPOV',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'rglASlider',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'rglFSlider',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'rglSlider',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        },
        {
          name => 'rglVSlider',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIJOYSTATE2'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'lARx',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lARy',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lARz',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lAX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lAY',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lAZ',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lFRx',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lFRy',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lFRz',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lFX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lFY',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lFZ',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lRx',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lRy',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lRz',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lVRx',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lVRy',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lVRz',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lVX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lVY',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lVZ',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lY',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lZ',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'rgbButtons',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'BYTE',
            arguments => '[128]'
          },
          {
            kind => 'variable',
            name => 'rgdwPOV',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD',
            arguments => '[4]'
          },
          {
            kind => 'variable',
            name => 'rglASlider',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG',
            arguments => '[2]'
          },
          {
            kind => 'variable',
            name => 'rglFSlider',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG',
            arguments => '[2]'
          },
          {
            kind => 'variable',
            name => 'rglSlider',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG',
            arguments => '[2]'
          },
          {
            kind => 'variable',
            name => 'rglVSlider',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG',
            arguments => '[2]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIMOUSESTATE',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'lX',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIMOUSESTATE'
        },
        {
          name => 'lY',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIMOUSESTATE'
        },
        {
          name => 'lZ',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIMOUSESTATE'
        },
        {
          name => 'rgbButtons',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIMOUSESTATE'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'lX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lY',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lZ',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'rgbButtons',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'BYTE',
            arguments => '[4]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIMOUSESTATE2',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'lX',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIMOUSESTATE2'
        },
        {
          name => 'lY',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIMOUSESTATE2'
        },
        {
          name => 'lZ',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIMOUSESTATE2'
        },
        {
          name => 'rgbButtons',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIMOUSESTATE2'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'lX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lY',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lZ',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'rgbButtons',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'BYTE',
            arguments => '[8]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIOBJECTDATAFORMAT',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwFlags',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIOBJECTDATAFORMAT'
        },
        {
          name => 'dwOfs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIOBJECTDATAFORMAT'
        },
        {
          name => 'dwType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIOBJECTDATAFORMAT'
        },
        {
          name => 'pguid',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIOBJECTDATAFORMAT'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwFlags',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwOfs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'pguid',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const GUID *'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPERIODIC',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwMagnitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPERIODIC'
        },
        {
          name => 'dwPeriod',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPERIODIC'
        },
        {
          name => 'dwPhase',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPERIODIC'
        },
        {
          name => 'lOffset',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPERIODIC'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwMagnitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwPeriod',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwPhase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'lOffset',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPROPCAL',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'diph',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCAL'
        },
        {
          name => 'lCenter',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCAL'
        },
        {
          name => 'lMax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCAL'
        },
        {
          name => 'lMin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCAL'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'diph',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIPROPHEADER'
          },
          {
            kind => 'variable',
            name => 'lCenter',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lMax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lMin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPROPCALPOV',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'diph',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCALPOV'
        },
        {
          name => 'lMax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCALPOV'
        },
        {
          name => 'lMin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCALPOV'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'diph',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIPROPHEADER'
          },
          {
            kind => 'variable',
            name => 'lMax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG',
            arguments => '[5]'
          },
          {
            kind => 'variable',
            name => 'lMin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG',
            arguments => '[5]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPROPCPOINTS',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'cp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCPOINTS'
        },
        {
          name => 'diph',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCPOINTS'
        },
        {
          name => 'dwCPointsNum',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPCPOINTS'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'cp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'CPOINT',
            arguments => '[MAXCPOINTSNUM]'
          },
          {
            kind => 'variable',
            name => 'diph',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIPROPHEADER'
          },
          {
            kind => 'variable',
            name => 'dwCPointsNum',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPROPDWORD',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'diph',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPDWORD'
        },
        {
          name => 'dwData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPDWORD'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'diph',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIPROPHEADER'
          },
          {
            kind => 'variable',
            name => 'dwData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPROPGUIDANDPATH',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'diph',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPGUIDANDPATH'
        },
        {
          name => 'guidClass',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPGUIDANDPATH'
        },
        {
          name => 'wszPath',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPGUIDANDPATH'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'diph',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIPROPHEADER'
          },
          {
            kind => 'variable',
            name => 'guidClass',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GUID'
          },
          {
            kind => 'variable',
            name => 'wszPath',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPROPHEADER',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'dwHeaderSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPHEADER'
        },
        {
          name => 'dwHow',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPHEADER'
        },
        {
          name => 'dwObj',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPHEADER'
        },
        {
          name => 'dwSize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPHEADER'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'dwHeaderSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwHow',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwObj',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'variable',
            name => 'dwSize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPROPPOINTER',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'diph',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPPOINTER'
        },
        {
          name => 'uData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPPOINTER'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'diph',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIPROPHEADER'
          },
          {
            kind => 'variable',
            name => 'uData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT_PTR'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPROPRANGE',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'diph',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPRANGE'
        },
        {
          name => 'lMax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPRANGE'
        },
        {
          name => 'lMin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPRANGE'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'diph',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIPROPHEADER'
          },
          {
            kind => 'variable',
            name => 'lMax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lMin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIPROPSTRING',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'diph',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPSTRING'
        },
        {
          name => 'wsz',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIPROPSTRING'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'diph',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIPROPHEADER'
          },
          {
            kind => 'variable',
            name => 'wsz',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WCHAR',
            arguments => '[MAX_PATH]'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'DIRAMPFORCE',
      includes => {
        local => 'yes',
        name => 'dinput.h'
      },
      all_members => [
        {
          name => 'lEnd',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIRAMPFORCE'
        },
        {
          name => 'lStart',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'DIRAMPFORCE'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'lEnd',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          },
          {
            kind => 'variable',
            name => 'lStart',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LONG'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'GPS_DATA_ADVANCED',
      includes => {
        local => 'yes',
        name => 'ComThread.h'
      },
      all_members => [
        {
          name => 'heading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'height',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'horizontal_accuracy',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'latitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'latitude_best_estimate',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'longitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'longitude_best_estimate',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'numSV',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'speed_accuracy',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'speed_x',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'speed_x_best_estimate',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'speed_y',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'speed_y_best_estimate',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'status',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        },
        {
          name => 'vertical_accuracy',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'GPS_DATA_ADVANCED'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'heading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'height',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'horizontal_accuracy',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned int'
          },
          {
            kind => 'variable',
            name => 'latitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'latitude_best_estimate',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'longitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'longitude_best_estimate',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'numSV',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned int'
          },
          {
            kind => 'variable',
            name => 'speed_accuracy',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned int'
          },
          {
            kind => 'variable',
            name => 'speed_x',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'speed_x_best_estimate',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'speed_y',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'speed_y_best_estimate',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'status',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'vertical_accuracy',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned int'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'IMU_CALCDATA',
      includes => {
        local => 'yes',
        name => 'ComThread.h'
      },
      all_members => [
        {
          name => 'acc_absolute_value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'acc_angle_nick',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'acc_angle_roll',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'acc_x',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'acc_x_calib',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'acc_y',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'acc_y_calib',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'acc_z',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'acc_z_calib',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'angle_nick',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'angle_roll',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'angle_yaw',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'angvel_nick',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'angvel_roll',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'angvel_yaw',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'dheight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'dheight_reference',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'height',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'height_reference',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'Hx',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'Hy',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'Hz',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'mag_heading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'speed_x',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'speed_y',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        },
        {
          name => 'speed_z',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'IMU_CALCDATA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'acc_absolute_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'acc_angle_nick',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'acc_angle_roll',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'acc_x',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'acc_x_calib',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'acc_y',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'acc_y_calib',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'acc_z',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'acc_z_calib',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'angle_nick',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'angle_roll',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'angle_yaw',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'angvel_nick',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'angvel_roll',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'angvel_yaw',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'dheight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'dheight_reference',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'height',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'height_reference',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'Hx',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'Hy',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'Hz',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'mag_heading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'speed_x',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'speed_y',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'speed_z',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'JoystickGrabber',
      base => [
        {
          name => 'QObject',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'JoystickGrabber.h'
      },
      all_members => [
        {
          name => 'buttons',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'computeData',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'JoystickGrabber'
        },
        {
          name => 'createDevice',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'dataComputed',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'dataFormatProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'deviceEnumProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'directInputProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'Finalize',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'JoystickGrabber'
        },
        {
          name => 'grab',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'JoystickGrabber',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'joystickProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'leftStickX',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'leftStickY',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'm_bDataFormatProblem',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'JoystickGrabber'
        },
        {
          name => 'm_bDeviceEnumProblem',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'JoystickGrabber'
        },
        {
          name => 'm_bDeviceNotCreated',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'JoystickGrabber'
        },
        {
          name => 'm_bDirectInputProblem',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'JoystickGrabber'
        },
        {
          name => 'm_bJoystickProblem',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'JoystickGrabber'
        },
        {
          name => 'm_bNoJoystick',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'JoystickGrabber'
        },
        {
          name => 'm_pTimer',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'JoystickGrabber'
        },
        {
          name => 'noJoystick',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'pov',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'rightStickX',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'rightStickY',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'sendAcknowledge',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        },
        {
          name => 'topTrigger',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'JoystickGrabber'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'JoystickGrabber',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'dd/dad/a00005',
                      content => 'JoystickGrabber'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'createDevice',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Create the Direct X device. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'buttons',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            arguments => '[32]'
          },
          {
            kind => 'variable',
            name => 'leftStickX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'leftStickY',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'pov',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            arguments => '[4]'
          },
          {
            kind => 'variable',
            name => 'rightStickX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'rightStickY',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'topTrigger',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          }
        ]
      },
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'grab',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Grab information one time. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'sendAcknowledge',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send errors each time interval of the timer. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      signals => {
        members => [
          {
            kind => 'signal',
            name => 'dataComputed',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Data computed signal. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'dataFormatProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Data format for controller problem signal. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'deviceEnumProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Enumeration of devices problem signal. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'directInputProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Direct Input problem signal. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'joystickProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Joystick access problem signal. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'noJoystick',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'No joystick or gamepad connected signal. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'computeData',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Compute datat from game controller grab. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'state',
                type => 'DIJOYSTATE'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Finalize',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Finalize the game controller handle. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_bDataFormatProblem',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bDeviceEnumProblem',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bDeviceNotCreated',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bDirectInputProblem',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bJoystickProblem',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bNoJoystick',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_pTimer',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTimer'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'LatLongCoord',
      includes => {
        local => 'yes',
        name => 'LatLongCoord.h'
      },
      all_members => [
        {
          name => 'getDistance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LatLongCoord'
        },
        {
          name => 'getLatitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LatLongCoord'
        },
        {
          name => 'getLongitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LatLongCoord'
        },
        {
          name => 'LatLongCoord',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LatLongCoord'
        },
        {
          name => 'LatLongCoord',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LatLongCoord'
        },
        {
          name => 'LatLongCoord',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LatLongCoord'
        },
        {
          name => 'm_dLatitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LatLongCoord'
        },
        {
          name => 'm_dLongitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LatLongCoord'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LatLongCoord'
        },
        {
          name => 'setCoordinates',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LatLongCoord'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'LatLongCoord',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'de/d21/a00006',
                      content => 'LatLongCoord'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'LatLongCoord',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pCoordinates'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'latitude / longitude coordinates LatLongCoord* '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'de/d21/a00006',
                      content => 'LatLongCoord'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pCoordinates',
                type => 'LatLongCoord *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'LatLongCoord',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dLatitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'latitude in decimal degrees double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_dLongitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'longitude in decimal degrees double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'de/d21/a00006',
                      content => 'LatLongCoord'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dLatitude',
                type => 'double'
              },
              {
                declaration_name => 'p_dLongitude',
                type => 'double'
              }
            ]
          },
          {
            kind => 'function',
            name => 'getDistance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Compute distance between 2 latitude / longitude coordinates. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pCoordinate'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'second coordinates model LatLongCoord* '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pCoordinate',
                type => 'LatLongCoord *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'getLatitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Latitude getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'Latitude in decimal degrees double '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getLongitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Longitude getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'Latitude in decimal degrees double '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Comparaison operator. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pLatLong'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'second coordinates model '
                      },
                      {
                        type => 'url',
                        link => 'de/d21/a00006',
                        content => 'LatLongCoord'
                      },
                      {
                        type => 'text',
                        content => '& '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'Equality between the 2 models bool '
                    }
                  ]
                }
              ]
            },
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pLatLong',
                type => 'const LatLongCoord &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setCoordinates',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Coordinates setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dLatitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'latitude in decimal degrees double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_dLongitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'longitude in decimal degrees double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dLatitude',
                type => 'double'
              },
              {
                declaration_name => 'p_dLongitude',
                type => 'double'
              }
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_dLatitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_dLongitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'LL_STATUS',
      includes => {
        local => 'yes',
        name => 'ComThread.h'
      },
      all_members => [
        {
          name => 'battery_voltage_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        },
        {
          name => 'battery_voltage_2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        },
        {
          name => 'chksum_error',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        },
        {
          name => 'compass_enabled',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        },
        {
          name => 'cpu_load',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        },
        {
          name => 'flightMode',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        },
        {
          name => 'flying',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        },
        {
          name => 'motors_on',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        },
        {
          name => 'status',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        },
        {
          name => 'up_time',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LL_STATUS'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'battery_voltage_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'battery_voltage_2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'chksum_error',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char'
          },
          {
            kind => 'variable',
            name => 'compass_enabled',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char'
          },
          {
            kind => 'variable',
            name => 'cpu_load',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'flightMode',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'flying',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char'
          },
          {
            kind => 'variable',
            name => 'motors_on',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char'
          },
          {
            kind => 'variable',
            name => 'status',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'up_time',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'LogReplayControl',
      base => [
        {
          name => 'QObject',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'LogReplayControl.h'
      },
      all_members => [
        {
          name => 'backward',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'forward',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'geolocation',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'getInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'kill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'LogReplayControl',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        },
        {
          name => 'm_aAltitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        },
        {
          name => 'm_aHeading',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        },
        {
          name => 'm_aLatitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        },
        {
          name => 'm_aLongitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        },
        {
          name => 'm_bReverse',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        },
        {
          name => 'm_iData',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        },
        {
          name => 'm_pReplayTimer',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        },
        {
          name => 'openLog',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'pause',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'replay',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'singleton',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        },
        {
          name => 'start',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'stop',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => 'updateHeading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'LogReplayControl'
        },
        {
          name => '~LogReplayControl',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'LogReplayControl'
        }
      ],
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'backward',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'forward',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openLog',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'pause',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'replay',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'start',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'stop',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      signals => {
        members => [
          {
            kind => 'signal',
            name => 'geolocation',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Update MUAV geolocation. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'x'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'longitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'y'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'latitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'z'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'yaw'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'latitude',
                type => 'double'
              },
              {
                declaration_name => 'longitude',
                type => 'double'
              },
              {
                declaration_name => 'altitude',
                type => 'double'
              },
              {
                declaration_name => 'heading',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'updateHeading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update heading value. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'heading value double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'getInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'de/d5e/a00007',
                  content => 'LogReplayControl'
                },
                {
                  type => 'text',
                  content => ' lone instance getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'lone instance MissionControl* '
                    }
                  ]
                }
              ]
            },
            type => 'static LogReplayControl *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'kill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Instance killer. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'static void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'LogReplayControl',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'de/d5e/a00007',
                      content => 'LogReplayControl'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~LogReplayControl',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_aAltitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< double >'
          },
          {
            kind => 'variable',
            name => 'm_aHeading',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< double >'
          },
          {
            kind => 'variable',
            name => 'm_aLatitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< double >'
          },
          {
            kind => 'variable',
            name => 'm_aLongitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< double >'
          },
          {
            kind => 'variable',
            name => 'm_bReverse',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_iData',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'm_pReplayTimer',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTimer'
          }
        ]
      },
      private_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'singleton',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static LogReplayControl *',
            initializer => '= NULL'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'MARCS',
      base => [
        {
          name => 'QMainWindow',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'marcs.h'
      },
      all_members => [
        {
          name => 'addPoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'affichageList',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'batteryLevel',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'clear_mission',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'clearMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'clickOff',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'clickOn',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'close',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'closeEvent',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'connected',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'createAddMark',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'createHomeMark',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'createRpaMark',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'createStyleAddMark',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'createStyleHome',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'createStyleRPA',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'document',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'documentHome',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'documentMark',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'documentRPA',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'editWaypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'fichier',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'fileOpened',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'finishEditData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'fly',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'goTo',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'gps0',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'gps1',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'gps2',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'gps3',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'gps4',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'gps5',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'GPSLevel',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'home',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'homeShow',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'iconLand',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'iconOff',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'iconOn',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'iconTakeOff',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'item',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemAlt',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemHdg',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemLat',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemLon',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemMarkAlt',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemMarkHdg',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemMarkLat',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemMarkLon',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemMarkNum',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ItemName',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'land',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'landRPA',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'lastMap',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'lastMission',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'layout',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'listPlaceMark',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'loadData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'logShow10',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'logShow20',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'logShow30',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'logShow40',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'm_cMotorValue',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'm_listView',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'm_map',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'm_mission',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'm_pComList',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'm_pComWindow',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'm_pLabel',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'm_pValidCom',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'manager',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'manager_smallMap',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'MARCS',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'missionOpned',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'motorOn',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'motorTurn',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'myCom',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'myMission',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'n',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'nbClickMotors',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'next',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'nextIsShowing',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'num_add_waypoint',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'num_waypoint',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'number',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'numWpText',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_addMark_button_clicked',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_AddToMission_button_clicked',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_comboBox_ListWaypoint_currentIndexChanged',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_Delete_button_clicked',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_excute_button_clicked',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_lineEdit_Alt_textChanged',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_lineEdit_HDG_textEdited',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_NextWaypoint_button_clicked',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_start_button_clicked',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'on_timeEdit_Mission_timeChanged',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'open',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'openMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'openNewMap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'openNewWindowData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'openNewWindowMain',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'openNewWindowVideo',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'path',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'place',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'placemarkHome',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'placemarkMark',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'placemarkRPA',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'qstr',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'request',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'request_smallMap',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'rowAdd',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'saveEditData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'saveMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'setHeight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'setTableRPA',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'showConnectDialog',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'showEditWaypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'showList',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'showLog',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'startMotors',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'stopFly',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'stopMotors',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'styleArchHome',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'styleArchMark',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'styleArchRPA',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'switchToMap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'takeOff',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'takeOffClicked',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'temp',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'tempo',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'textNumWaypoint',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'ui',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'updateMotors',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'validCom',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'widget',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'wpListAdd',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'wpListOpen',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'wpListSave',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MARCS'
        },
        {
          name => 'XbeeConnect',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => 'XbeeDisconnect',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        },
        {
          name => '~MARCS',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MARCS'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'MARCS',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'parent',
                type => 'QWidget *',
                default_value => '0'
              }
            ]
          },
          {
            kind => 'function',
            name => '~MARCS',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'addPoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'add point to map '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'lon'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'qreal , lat qreal, GeoDataCoordinates::Unit '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'lon',
                type => 'qreal'
              },
              {
                declaration_name => 'lat',
                type => 'qreal'
              },
              {
                type => 'GeoDataCoordinates::Unit'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'batteryLevel',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'get the battery Level; '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'clearMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'clear mission from the map view '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'close',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'close the application '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'closeEvent',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Close the window. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'event'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'QCloseEvent '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'event',
                type => 'QCloseEvent *'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'createAddMark',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Add the Add Mark presentation on the map with position. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'lon'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'double , lat double , GeoDataCoordinates::Unit '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'lon',
                type => 'double'
              },
              {
                declaration_name => 'lat',
                type => 'double'
              },
              {
                type => 'GeoDataCoordinates::Unit'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'createHomeMark',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Add the HOME presentation on the map with position. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'lon'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'double , lat double , GeoDataCoordinates::Unit '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'lon',
                type => 'double'
              },
              {
                declaration_name => 'lat',
                type => 'double'
              },
              {
                type => 'GeoDataCoordinates::Unit'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'createRpaMark',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Add the '
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' presentation on the map with heading and position. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'hdg'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'double , lon double , lat double , GeoDataCoordinates::Unit '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'hdg',
                type => 'double'
              },
              {
                declaration_name => 'lon',
                type => 'double'
              },
              {
                declaration_name => 'lat',
                type => 'double'
              },
              {
                type => 'GeoDataCoordinates::Unit'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'createStyleAddMark',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Create the Style of the Add Mark presentation on the map. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'style'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'GeoDataStyle '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'style',
                type => 'GeoDataStyle *'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'createStyleHome',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Create the Style of the HOME presentation on the map. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'style'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'GeoDataStyle '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'style',
                type => 'GeoDataStyle *'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'createStyleRPA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Create the Style of the '
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' presentation on the map. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'style'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'GeoDataStyle, hdg double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'style',
                type => 'GeoDataStyle *'
              },
              {
                declaration_name => 'hdg',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'editWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'open the list of the waypoints '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'finishEditData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'close the edit waypoints view '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'fly',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'take off the '
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'goTo',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'GPSLevel',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'get The GPS Level '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_value'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'int '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_value',
                type => 'int'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'loadData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'load waypoint data from the index '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Open new mission from Kml File. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openNewMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Load map. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openNewWindowData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Show the Data window. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openNewWindowMain',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Show the main window Map. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openNewWindowVideo',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Show the video window. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'saveEditData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'save edition to the XML file source of the mission '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'saveMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Save mission to Kml File. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'setHeight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'set '
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' height field '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dHeight'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dHeight',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'setTableRPA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'add information to '
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' table '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'showConnectDialog',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'show the COM connect dialog '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'showEditWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'show the waypoint edition area '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'show'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'bool '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'show',
                type => 'bool'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'showList',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'show log list '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'showLog',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'show Log page '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'startMotors',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'start the '
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' engine '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'stopFly',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'land the '
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'stopMotors',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'stop the '
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' engine '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'switchToMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'switch view between the map and the video by clicking on map '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'updateMotors',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_cValue',
                type => 'char'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'validCom',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'send the Serial COM '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'XbeeConnect',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Xbee reconnected. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'XbeeDisconnect',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Xbee disconnected. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      signals => {
        members => [
          {
            kind => 'signal',
            name => 'clickOff',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'clickOn',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'landRPA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'next',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'lon',
                type => 'double'
              },
              {
                declaration_name => 'lat',
                type => 'double'
              },
              {
                declaration_name => 'alt',
                type => 'double'
              },
              {
                declaration_name => 'num',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'takeOff',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'affichageList',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'clear_mission',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'connected',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'document',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataDocument *'
          },
          {
            kind => 'variable',
            name => 'documentHome',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataDocument *'
          },
          {
            kind => 'variable',
            name => 'documentMark',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataDocument *'
          },
          {
            kind => 'variable',
            name => 'documentRPA',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataDocument *'
          },
          {
            kind => 'variable',
            name => 'fichier',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'ofstream'
          },
          {
            kind => 'variable',
            name => 'fileOpened',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'gps0',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'gps1',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'gps2',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'gps3',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'gps4',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'gps5',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'home',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'waypoint *'
          },
          {
            kind => 'variable',
            name => 'homeShow',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'iconLand',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QIcon'
          },
          {
            kind => 'variable',
            name => 'iconOff',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QIcon'
          },
          {
            kind => 'variable',
            name => 'iconOn',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QIcon'
          },
          {
            kind => 'variable',
            name => 'iconTakeOff',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QIcon'
          },
          {
            kind => 'variable',
            name => 'item',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemAlt',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemHdg',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemLat',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemLon',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemMarkAlt',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemMarkHdg',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemMarkLat',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemMarkLon',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemMarkNum',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'ItemName',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTableWidgetItem *'
          },
          {
            kind => 'variable',
            name => 'land',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'lastMap',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'lastMission',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'layout',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QGridLayout *'
          },
          {
            kind => 'variable',
            name => 'listPlaceMark',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< GeoDataPlacemark * >'
          },
          {
            kind => 'variable',
            name => 'logShow10',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'logShow20',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'logShow30',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'logShow40',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_cMotorValue',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'm_listView',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QListView *'
          },
          {
            kind => 'variable',
            name => 'm_map',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'm_mission',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< waypoint * >'
          },
          {
            kind => 'variable',
            name => 'm_pComList',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QComboBox *'
          },
          {
            kind => 'variable',
            name => 'm_pComWindow',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QMainWindow *'
          },
          {
            kind => 'variable',
            name => 'm_pLabel',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QLabel *'
          },
          {
            kind => 'variable',
            name => 'm_pValidCom',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QPushButton *'
          },
          {
            kind => 'variable',
            name => 'manager',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RoutingManager *'
          },
          {
            kind => 'variable',
            name => 'manager_smallMap',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RoutingManager *'
          },
          {
            kind => 'variable',
            name => 'missionOpned',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'motorOn',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'motorTurn',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'myCom',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'ComThread *'
          },
          {
            kind => 'variable',
            name => 'myMission',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'mission'
          },
          {
            kind => 'variable',
            name => 'n',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'nbClickMotors',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'nextIsShowing',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'num_add_waypoint',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'num_waypoint',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'number',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'numWpText',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char *'
          },
          {
            kind => 'variable',
            name => 'open',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'path',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'place',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataPlacemark *'
          },
          {
            kind => 'variable',
            name => 'placemarkHome',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataPlacemark *'
          },
          {
            kind => 'variable',
            name => 'placemarkMark',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataPlacemark *'
          },
          {
            kind => 'variable',
            name => 'placemarkRPA',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataPlacemark *'
          },
          {
            kind => 'variable',
            name => 'qstr',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'request',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RouteRequest *'
          },
          {
            kind => 'variable',
            name => 'request_smallMap',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RouteRequest *'
          },
          {
            kind => 'variable',
            name => 'rowAdd',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'styleArchHome',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataStyle *'
          },
          {
            kind => 'variable',
            name => 'styleArchMark',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataStyle *'
          },
          {
            kind => 'variable',
            name => 'styleArchRPA',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataStyle *'
          },
          {
            kind => 'variable',
            name => 'takeOffClicked',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'temp',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'string'
          },
          {
            kind => 'variable',
            name => 'tempo',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataCoordinates *'
          },
          {
            kind => 'variable',
            name => 'textNumWaypoint',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'string'
          },
          {
            kind => 'variable',
            name => 'ui',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'Ui::MARCS *'
          },
          {
            kind => 'variable',
            name => 'widget',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QWidget *'
          },
          {
            kind => 'variable',
            name => 'wpListAdd',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< waypoint * >'
          },
          {
            kind => 'variable',
            name => 'wpListOpen',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< waypoint * >'
          },
          {
            kind => 'variable',
            name => 'wpListSave',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< waypoint * >'
          }
        ]
      },
      private_slots => {
        members => [
          {
            kind => 'slot',
            name => 'on_addMark_button_clicked',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'on_AddToMission_button_clicked',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'on_comboBox_ListWaypoint_currentIndexChanged',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'index',
                type => 'int'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'on_Delete_button_clicked',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'on_excute_button_clicked',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'on_lineEdit_Alt_textChanged',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'QString'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'on_lineEdit_HDG_textEdited',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'QString'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'on_NextWaypoint_button_clicked',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'on_start_button_clicked',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'on_timeEdit_Mission_timeChanged',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'date',
                type => 'const QTime &'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'mission',
      includes => {
        local => 'yes',
        name => 'mission.h'
      },
      all_members => [
        {
          name => 'getNum',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'getWaypointList',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'loadMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'mission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'mission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'myMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'n_mission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'saveMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'saveMissionKml',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'setNum',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => 'setWaypointList',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        },
        {
          name => '~mission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'mission'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'mission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'num',
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => '~mission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getNum',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getWaypointList',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< waypoint * >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'loadMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< waypoint * >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'filename',
                type => 'QString'
              }
            ]
          },
          {
            kind => 'function',
            name => 'saveMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'wpList',
                type => 'QList< waypoint * >'
              },
              {
                declaration_name => 'fileName',
                type => 'QString'
              }
            ]
          },
          {
            kind => 'function',
            name => 'saveMissionKml',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'wpList',
                type => 'QList< waypoint * >'
              },
              {
                declaration_name => 'fileName',
                type => 'QString'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setNum',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setWaypointList',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'mission',
                type => 'QList< waypoint * >'
              }
            ]
          }
        ]
      },
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'myMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< waypoint * >'
          },
          {
            kind => 'variable',
            name => 'n_mission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'MissionControl',
      base => [
        {
          name => 'QObject',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'MissionControl.h'
      },
      all_members => [
        {
          name => 'acknowledge',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'addMark',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'batteryLevel',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'cannotLaunchFP',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'controllerConnected',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'controllerProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'digression',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'directXProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'down',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'endFlightPlan',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'flightPlanLaunched',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'getInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'GPSLevel',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'inFlight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'kill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'launchFlightPlan',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'm_bFirstRC',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_bFirstWaypoint',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_bFPLaunched',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_bNextSent',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_bXBee',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_cEngine',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_dBattery',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_nGPS',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_nStatus',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_pLaunchTimer',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_pPreviousGPSHeightControlRC',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_pPreviousPitchRC',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_pPreviousRollRC',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_pPreviousSerialRC',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_pPreviousThrustRC',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_pPreviousYawRC',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'm_pWaypointTimer',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'MissionControl',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'move',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'moveBackward',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'moveForward',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'moveLeft',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'moveRight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'nextWaypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'pauseFlightPlan',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'radiocommandConnection',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'rcData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'RCDataChanged',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'resetWaypointNotification',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'sendLaunch',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'sendWaypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'singleton',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        },
        {
          name => 'stopFlightPlan',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'turnLeft',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'turnRight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'up',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'updateBattery',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'updateDigression',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'updateGPS',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'updateNAV',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'updateRadiocommand',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'updateWayStatus',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'updateXBee',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'waypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'waypointReached',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => 'XBeeConnection',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'MissionControl'
        },
        {
          name => '~MissionControl',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'MissionControl'
        }
      ],
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'acknowledge',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Receive MUAV acknowledge. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'm_pAck'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'acknowledge string char* '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'm_pAck',
                type => 'char *'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'addMark',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'down',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Decrease altitude command. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'inFlight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Define if the MUAV has its engines started. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_cValue',
                type => 'char'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'launchFlightPlan',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Launch the flight plan. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'indicate'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'if cannot launch (bad parameters) '
                      }
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'moveBackward',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Move backward command. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'moveForward',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Move forward command. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'moveLeft',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Move left command. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'moveRight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Move right command. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'nextWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Next waypoint index increment. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'end of flight plan reached '
                    }
                  ]
                }
              ]
            },
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'pauseFlightPlan',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Pause flight plan (no reset of next waypoint index) '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'rcData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Define if remote control values changed and update them. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'yaw'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'pitch'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'roll'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'thrust'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'serial'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'GPSHeightControl'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'valid'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'char '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_nYaw',
                type => 'short'
              },
              {
                declaration_name => 'p_nPitch',
                type => 'short'
              },
              {
                declaration_name => 'p_nRoll',
                type => 'short'
              },
              {
                declaration_name => 'p_nThrust',
                type => 'short'
              },
              {
                declaration_name => 'p_nSerial',
                type => 'short'
              },
              {
                declaration_name => 'p_nGPSHeightControl',
                type => 'short'
              },
              {
                declaration_name => 'p_cValid',
                type => 'char'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'sendWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send waypoint order. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'stopFlightPlan',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Stop flight plan (reset of next waypoint index) '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'turnLeft',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Turn left command. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'turnRight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Turn right command. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'up',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Increase altitude command. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'updateBattery',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Battery level update. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'battery level double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'updateDigression',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Compute the digression value. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'updateGPS',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'GPS satellite number update. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'number of satellite double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'int'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'updateNAV',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Update the mission state. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_cWaypointNumber'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'waypoint number char '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_nDistance'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'waypoint / MUAV distance short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_cStatus'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'navigation status short '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_cWaypointNumber',
                type => 'char'
              },
              {
                declaration_name => 'p_nDistance',
                type => 'short'
              },
              {
                declaration_name => 'p_cStatus',
                type => 'short'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'updateRadiocommand',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Remote control connection update. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'remote control link state short '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'short'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'updateWayStatus',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Define if waypoint reached. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_cWaypointNumber'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'don\'t care char '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_nDistance'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'don\'t care short '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_nNavStatus'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'don\'t care short '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_cWaypointNumber',
                type => 'char'
              },
              {
                declaration_name => 'p_nDistance',
                type => 'short'
              },
              {
                declaration_name => 'p_nNavStatus',
                type => 'short'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'updateXBee',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'XBee connection state update. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'connection state bool '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'bool'
              }
            ]
          }
        ]
      },
      signals => {
        members => [
          {
            kind => 'signal',
            name => 'batteryLevel',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Battery level. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'cannotLaunchFP',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Cannot launch flight plan event. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_bBattery'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'battery level above low bool '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_bGPS'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'enough satellites bool '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_bXBee'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'link through XBee bool '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_bStatus'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'MUAV in GPS mode bool '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_bFlightPlan'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'flight plan loaded bool '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_bEngine'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'engines started bool '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_bBattery',
                type => 'bool'
              },
              {
                declaration_name => 'p_bGPS',
                type => 'bool'
              },
              {
                declaration_name => 'p_bXBee',
                type => 'bool'
              },
              {
                declaration_name => 'p_bStatus',
                type => 'bool'
              },
              {
                declaration_name => 'p_bFlightPlan',
                type => 'bool'
              },
              {
                declaration_name => 'p_bEngine',
                type => 'bool'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'controllerConnected',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Controller connected. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'controllerProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Problem with the game controller. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'digression',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Digression value. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'directXProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Direct X problem. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'endFlightPlan',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'End of flight plan event. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'flightPlanLaunched',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Flight plan launched acknowledge. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'GPSLevel',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'GPS reception level. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'int'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'move',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' to send. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'x'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'in meters double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'y'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'in meters double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'z'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'yaw'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'x',
                type => 'double'
              },
              {
                declaration_name => 'y',
                type => 'double'
              },
              {
                declaration_name => 'z',
                type => 'double'
              },
              {
                declaration_name => 'yaw',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'radiocommandConnection',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Radiocommand connection state. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'bool'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'RCDataChanged',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Remote control values changed. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'resetWaypointNotification',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Change next waypoint. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'sendLaunch',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Send launch order. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' to send. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'x'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'longitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'y'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'latitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'z'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'number'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'waypoint number double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'x',
                type => 'double'
              },
              {
                declaration_name => 'y',
                type => 'double'
              },
              {
                declaration_name => 'z',
                type => 'double'
              },
              {
                declaration_name => 'number',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'waypointReached',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' reached event. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'XBeeConnection',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'XBee connection state. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'bool'
              }
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'getInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd7/dec/a00010',
                  content => 'MissionControl'
                },
                {
                  type => 'text',
                  content => ' lone instance getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'lone instance MissionControl* '
                    }
                  ]
                }
              ]
            },
            type => 'static MissionControl *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'kill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Instance killer. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'static void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'MissionControl',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd7/dec/a00010',
                      content => 'MissionControl'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~MissionControl',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_bFirstRC',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bFirstWaypoint',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bFPLaunched',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bNextSent',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bXBee',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_cEngine',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char'
          },
          {
            kind => 'variable',
            name => 'm_dBattery',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_nGPS',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'm_nStatus',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'm_pLaunchTimer',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTimer'
          },
          {
            kind => 'variable',
            name => 'm_pPreviousGPSHeightControlRC',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'm_pPreviousPitchRC',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'm_pPreviousRollRC',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'm_pPreviousSerialRC',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'm_pPreviousThrustRC',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'm_pPreviousYawRC',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'm_pWaypointTimer',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTimer'
          }
        ]
      },
      private_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'singleton',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static MissionControl *',
            initializer => '= NULL'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'PeripheralController',
      base => [
        {
          name => 'QObject',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'PeripheralController.h'
      },
      all_members => [
        {
          name => 'controllerConnected',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'controllerControlMode',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'controllerMouseMode',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'controlMode',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'dataFormatProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'deviceEnumProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'directInputProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'getInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'isMouseMode',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'joystickProblem',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'kill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'm_bMouseMode',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'm_bWaitRelease',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'm_bWaitReleaseMode',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'm_bWaitReleaseRight',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'm_pJoystick',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'm_pTimer',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'mouseEvent',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'mouseMode',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'move',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'noJoystick',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'PeripheralController',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'problemDetected',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'singleton',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        },
        {
          name => 'startControllerGrab',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => 'useController',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'PeripheralController'
        },
        {
          name => '~PeripheralController',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'PeripheralController'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'isMouseMode',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Mouse mode activated indicator. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'In mouse mode bool '
                    }
                  ]
                }
              ]
            },
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'startControllerGrab',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Start grab timer. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_nTime'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'interval time in ms for grab int '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_nTime',
                type => 'int'
              }
            ]
          }
        ]
      },
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'useController',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Controller handle slot (timed by another software controller) '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      signals => {
        members => [
          {
            kind => 'signal',
            name => 'controllerConnected',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Controller connected event. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'controllerControlMode',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Controller control mode event. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'controllerMouseMode',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Controller mouse mode event. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'dataFormatProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Direct X data format problem. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'deviceEnumProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Device emumeration problem. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'directInputProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Direct Input problem. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'joystickProblem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Game controller device state get problem. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'signal',
            name => 'mouseEvent',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Mouse event reagrding actions on gamepad. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'button'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'emulated pressed button Qt::MouseButton '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'waitRelease'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'button already pressed bool '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'button',
                type => 'Qt::MouseButton'
              },
              {
                declaration_name => 'waitRelease',
                type => 'bool'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'move',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' to send. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'x'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'in meters double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'y'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'in meters double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'z'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'yaw'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'x',
                type => 'double'
              },
              {
                declaration_name => 'y',
                type => 'double'
              },
              {
                declaration_name => 'z',
                type => 'double'
              },
              {
                declaration_name => 'yaw',
                type => 'double'
              }
            ]
          },
          {
            kind => 'signal',
            name => 'noJoystick',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'No joystick event. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'getInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Get the lone instance. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'da/d45/a00011',
                      content => 'PeripheralController'
                    },
                    {
                      type => 'text',
                      content => ' instance PeripheralController* '
                    }
                  ]
                }
              ]
            },
            type => 'static PeripheralController *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'kill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Lone instance killer. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'static void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'PeripheralController',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'da/d45/a00011',
                      content => 'PeripheralController'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~PeripheralController',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'controlMode',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'MUAV control management. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mouseMode',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Mouse mode management. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_bMouseMode',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bWaitRelease',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bWaitReleaseMode',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_bWaitReleaseRight',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'm_pJoystick',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'JoystickGrabber *'
          },
          {
            kind => 'variable',
            name => 'm_pTimer',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTimer'
          },
          {
            kind => 'variable',
            name => 'problemDetected',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      private_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'singleton',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static PeripheralController *',
            initializer => '= NULL'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'QMainWindow',
      derived => [
        {
          name => 'MARCS',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'video',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'QObject',
      derived => [
        {
          name => 'CommunicationControl',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'JoystickGrabber',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'LogReplayControl',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'MissionControl',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'PeripheralController',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'RPA',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'UAV',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'UAVLogger',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'QThread',
      derived => [
        {
          name => 'ComThread',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'RC_DATA',
      includes => {
        local => 'yes',
        name => 'ComThread.h'
      },
      all_members => [
        {
          name => 'channels_in',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RC_DATA'
        },
        {
          name => 'channels_out',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RC_DATA'
        },
        {
          name => 'lock',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RC_DATA'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'channels_in',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short',
            arguments => '[8]'
          },
          {
            kind => 'variable',
            name => 'channels_out',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short',
            arguments => '[8]'
          },
          {
            kind => 'variable',
            name => 'lock',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'RPA',
      base => [
        {
          name => 'QObject',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'RPA.h'
      },
      all_members => [
        {
          name => 'geolocation',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'getAltitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'getCoordinates',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'getHeading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'getHeight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'getInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'kill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'm_dAltitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'RPA'
        },
        {
          name => 'm_dHeading',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'RPA'
        },
        {
          name => 'm_dHeight',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'RPA'
        },
        {
          name => 'm_pPosition',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'RPA'
        },
        {
          name => 'positionChanged',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'RPA',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'RPA'
        },
        {
          name => 'setAltitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'setCoordinates',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'setHeading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'setHeight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'singleton',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'RPA'
        },
        {
          name => 'updateHeading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => 'updateHeight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'RPA'
        },
        {
          name => '~RPA',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'RPA'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'getAltitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' altitude getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'altitude in meters double '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getCoordinates',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' coordinates getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'latitude / longitude coordinates in decimal degrees LatLongCoord* '
                    }
                  ]
                }
              ]
            },
            type => 'LatLongCoord *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getHeading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' heading getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'heading in degrees double '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getHeight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' height getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'heading in degrees double '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'setAltitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' altitude setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dAltitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'new altitude double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dAltitude',
                type => 'double'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setCoordinates',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' coordinates setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pPosition'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'new GPS coordinates LatLongCoord* '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pPosition',
                type => 'LatLongCoord *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setHeading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' heading setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dHeading'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'new heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dHeading',
                type => 'double'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setHeight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' height setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dHeading'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'new heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dHeight',
                type => 'double'
              }
            ]
          }
        ]
      },
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'geolocation',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'geolocation update slot '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_fLatitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'latitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_fLongitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'longitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_fAltitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_fHeading'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => '"false" heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_fLatitude',
                type => 'double'
              },
              {
                declaration_name => 'p_fLongitude',
                type => 'double'
              },
              {
                declaration_name => 'p_fAltitude',
                type => 'double'
              },
              {
                declaration_name => 'p_fHeading',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'updateHeading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => '"real" heading update slot '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => '"real" heading value double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'updateHeight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Height (from ground) update slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => '"real" heading value double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          }
        ]
      },
      signals => {
        members => [
          {
            kind => 'signal',
            name => 'positionChanged',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Position changed event signal. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'getInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' instance getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'df/d86/a00012',
                      content => 'RPA'
                    },
                    {
                      type => 'text',
                      content => ' pointer RPA* '
                    }
                  ]
                }
              ]
            },
            type => 'static RPA *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'kill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'df/d86/a00012',
                  content => 'RPA'
                },
                {
                  type => 'text',
                  content => ' instance killer. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'static void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'RPA',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'df/d86/a00012',
                      content => 'RPA'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~RPA',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_dAltitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_dHeading',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_dHeight',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_pPosition',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LatLongCoord *'
          }
        ]
      },
      private_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'singleton',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static RPA *',
            initializer => '= NULL'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'std::allocator',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::allocator'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::array',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::array'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::auto_ptr',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'operator->',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::auto_ptr'
        },
        {
          name => 'ptr',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::auto_ptr'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator->',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'ptr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::bad_alloc',
      base => [
        {
          name => 'exception',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::bad_cast',
      base => [
        {
          name => 'exception',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::bad_exception',
      base => [
        {
          name => 'exception',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::bad_typeid',
      base => [
        {
          name => 'exception',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_fstream',
      base => [
        {
          name => 'basic_iostream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'fstream',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wfstream',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_ifstream',
      base => [
        {
          name => 'basic_istream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'ifstream',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wifstream',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_ios',
      base => [
        {
          name => 'ios_base',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'basic_istream< char >',
          virtualness => 'virtual',
          protection => 'public'
        },
        {
          name => 'basic_istream< wchar_t >',
          virtualness => 'virtual',
          protection => 'public'
        },
        {
          name => 'basic_ostream< char >',
          virtualness => 'virtual',
          protection => 'public'
        },
        {
          name => 'basic_ostream< wchar_t >',
          virtualness => 'virtual',
          protection => 'public'
        },
        {
          name => 'basic_istream< Char >',
          virtualness => 'virtual',
          protection => 'public'
        },
        {
          name => 'basic_ostream< Char >',
          virtualness => 'virtual',
          protection => 'public'
        },
        {
          name => 'ios',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wios',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_iostream',
      base => [
        {
          name => 'basic_istream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ostream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'basic_fstream< char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_fstream< wchar_t >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_stringstream< char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_stringstream< wchar_t >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_fstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_stringstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_istream',
      base => [
        {
          name => 'basic_ios< Char >',
          virtualness => 'virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'basic_ifstream< char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ifstream< wchar_t >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_iostream< char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_iostream< wchar_t >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_istringstream< char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_istringstream< wchar_t >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ifstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_iostream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_istringstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'istream',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wistream',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_istringstream',
      base => [
        {
          name => 'basic_istream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'istringstream',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wistringstream',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_ofstream',
      base => [
        {
          name => 'basic_ostream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'ofstream',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wofstream',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_ostream',
      base => [
        {
          name => 'basic_ios< Char >',
          virtualness => 'virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'basic_iostream< char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_iostream< wchar_t >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ofstream< char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ofstream< wchar_t >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ostringstream< char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ostringstream< wchar_t >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_iostream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ofstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ostringstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'ostream',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wostream',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_ostringstream',
      base => [
        {
          name => 'basic_ostream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'ostringstream',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wostringstream',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_string',
      derived => [
        {
          name => 'string',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wstring',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
        {
          name => 'std::basic_string::const_iterator'
        },
        {
          name => 'std::basic_string::const_reverse_iterator'
        },
        {
          name => 'std::basic_string::iterator'
        },
        {
          name => 'std::basic_string::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_string::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_string::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_string::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_string::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::basic_stringstream',
      base => [
        {
          name => 'basic_iostream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'stringstream',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'wstringstream',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Char',
          definition_name => 'Char'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::bitset',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'Bits',
          definition_name => 'Bits'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::complex',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::deque',
      inner => [
        {
          name => 'std::deque::const_iterator'
        },
        {
          name => 'std::deque::const_reverse_iterator'
        },
        {
          name => 'std::deque::iterator'
        },
        {
          name => 'std::deque::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::deque'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::deque::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::deque::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::deque::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::deque::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::domain_error',
      base => [
        {
          name => 'logic_error',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::error_category',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::error_code',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::error_condition',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::exception',
      derived => [
        {
          name => 'bad_alloc',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'bad_cast',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'bad_exception',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'bad_typeid',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'ios_base::failure',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'logic_error',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'runtime_error',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::forward_list',
      inner => [
        {
          name => 'std::forward_list::const_iterator'
        },
        {
          name => 'std::forward_list::const_reverse_iterator'
        },
        {
          name => 'std::forward_list::iterator'
        },
        {
          name => 'std::forward_list::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::forward_list'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::forward_list::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::forward_list::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::forward_list::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::forward_list::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::fstream',
      base => [
        {
          name => 'basic_fstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::ifstream',
      base => [
        {
          name => 'basic_ifstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::invalid_argument',
      base => [
        {
          name => 'logic_error',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::ios',
      base => [
        {
          name => 'basic_ios< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::ios_base',
      derived => [
        {
          name => 'basic_ios< char >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ios< wchar_t >',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'basic_ios< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
        {
          name => 'std::ios_base::failure'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::ios_base::failure',
      base => [
        {
          name => 'exception',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::istream',
      base => [
        {
          name => 'basic_istream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::istringstream',
      base => [
        {
          name => 'basic_istringstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::length_error',
      base => [
        {
          name => 'logic_error',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::list',
      inner => [
        {
          name => 'std::list::const_iterator'
        },
        {
          name => 'std::list::const_reverse_iterator'
        },
        {
          name => 'std::list::iterator'
        },
        {
          name => 'std::list::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::list'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::list::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::list::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::list::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::list::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::logic_error',
      base => [
        {
          name => 'exception',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'domain_error',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'invalid_argument',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'length_error',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'out_of_range',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::map',
      inner => [
        {
          name => 'std::map::const_iterator'
        },
        {
          name => 'std::map::const_reverse_iterator'
        },
        {
          name => 'std::map::iterator'
        },
        {
          name => 'std::map::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'K',
          definition_name => 'K'
        },
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::map'
        },
        {
          name => 'keys',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::map'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'keys',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'K'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::map::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::map::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::map::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::map::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multimap',
      inner => [
        {
          name => 'std::multimap::const_iterator'
        },
        {
          name => 'std::multimap::const_reverse_iterator'
        },
        {
          name => 'std::multimap::iterator'
        },
        {
          name => 'std::multimap::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'K',
          definition_name => 'K'
        },
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::multimap'
        },
        {
          name => 'keys',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::multimap'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'keys',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'K'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multimap::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multimap::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multimap::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multimap::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multiset',
      inner => [
        {
          name => 'std::multiset::const_iterator'
        },
        {
          name => 'std::multiset::const_reverse_iterator'
        },
        {
          name => 'std::multiset::iterator'
        },
        {
          name => 'std::multiset::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'K',
          definition_name => 'K'
        }
      ],
      all_members => [
        {
          name => 'keys',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::multiset'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'keys',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'K'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multiset::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multiset::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multiset::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::multiset::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::ofstream',
      base => [
        {
          name => 'basic_ofstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::ostream',
      base => [
        {
          name => 'basic_ostream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::ostringstream',
      base => [
        {
          name => 'basic_ostringstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::out_of_range',
      base => [
        {
          name => 'logic_error',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::overflow_error',
      base => [
        {
          name => 'runtime_error',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::priority_queue',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::priority_queue'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::queue',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::queue'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::range_error',
      base => [
        {
          name => 'runtime_error',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::runtime_error',
      base => [
        {
          name => 'exception',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'overflow_error',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'range_error',
          virtualness => 'non_virtual',
          protection => 'public'
        },
        {
          name => 'underflow_error',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::set',
      inner => [
        {
          name => 'std::set::const_iterator'
        },
        {
          name => 'std::set::const_reverse_iterator'
        },
        {
          name => 'std::set::iterator'
        },
        {
          name => 'std::set::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'K',
          definition_name => 'K'
        }
      ],
      all_members => [
        {
          name => 'keys',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::set'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'keys',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'K'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::set::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::set::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::set::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::set::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::smart_ptr',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'operator->',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::smart_ptr'
        },
        {
          name => 'ptr',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::smart_ptr'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator->',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'ptr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::stack',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::stack'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::string',
      base => [
        {
          name => 'basic_string< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
        {
          name => 'std::string::const_iterator'
        },
        {
          name => 'std::string::const_reverse_iterator'
        },
        {
          name => 'std::string::iterator'
        },
        {
          name => 'std::string::reverse_iterator'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::string::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::string::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::string::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::string::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::stringstream',
      base => [
        {
          name => 'basic_stringstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::system_error',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::thread',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::underflow_error',
      base => [
        {
          name => 'runtime_error',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unique_ptr',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'operator->',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::unique_ptr'
        },
        {
          name => 'ptr',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::unique_ptr'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator->',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'ptr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_map',
      inner => [
        {
          name => 'std::unordered_map::const_iterator'
        },
        {
          name => 'std::unordered_map::const_reverse_iterator'
        },
        {
          name => 'std::unordered_map::iterator'
        },
        {
          name => 'std::unordered_map::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'K',
          definition_name => 'K'
        },
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::unordered_map'
        },
        {
          name => 'keys',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::unordered_map'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'keys',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'K'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_map::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_map::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_map::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_map::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multimap',
      inner => [
        {
          name => 'std::unordered_multimap::const_iterator'
        },
        {
          name => 'std::unordered_multimap::const_reverse_iterator'
        },
        {
          name => 'std::unordered_multimap::iterator'
        },
        {
          name => 'std::unordered_multimap::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'K',
          definition_name => 'K'
        },
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::unordered_multimap'
        },
        {
          name => 'keys',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::unordered_multimap'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'keys',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'K'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multimap::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multimap::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multimap::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multimap::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multiset',
      inner => [
        {
          name => 'std::unordered_multiset::const_iterator'
        },
        {
          name => 'std::unordered_multiset::const_reverse_iterator'
        },
        {
          name => 'std::unordered_multiset::iterator'
        },
        {
          name => 'std::unordered_multiset::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'K',
          definition_name => 'K'
        }
      ],
      all_members => [
        {
          name => 'keys',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::unordered_multiset'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'keys',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'K'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multiset::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multiset::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multiset::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_multiset::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_set',
      inner => [
        {
          name => 'std::unordered_set::const_iterator'
        },
        {
          name => 'std::unordered_set::const_reverse_iterator'
        },
        {
          name => 'std::unordered_set::iterator'
        },
        {
          name => 'std::unordered_set::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'K',
          definition_name => 'K'
        }
      ],
      all_members => [
        {
          name => 'keys',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::unordered_set'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'keys',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'K'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_set::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_set::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_set::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::unordered_set::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::valarray',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::valarray'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::vector',
      inner => [
        {
          name => 'std::vector::const_iterator'
        },
        {
          name => 'std::vector::const_reverse_iterator'
        },
        {
          name => 'std::vector::iterator'
        },
        {
          name => 'std::vector::reverse_iterator'
        }
      ],
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'elements',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::vector'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'elements',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::vector::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::vector::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::vector::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::vector::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::weak_ptr',
      template_parameters => [
        {
          type => 'typename',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'operator->',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::weak_ptr'
        },
        {
          name => 'ptr',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'std::weak_ptr'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator->',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'ptr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'STL member. '
                }
              ]
            },
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wfstream',
      base => [
        {
          name => 'basic_fstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wifstream',
      base => [
        {
          name => 'basic_ifstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wios',
      base => [
        {
          name => 'basic_ios< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wistream',
      base => [
        {
          name => 'basic_istream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wistringstream',
      base => [
        {
          name => 'basic_istringstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wofstream',
      base => [
        {
          name => 'basic_ofstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wostream',
      base => [
        {
          name => 'basic_ostream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wostringstream',
      base => [
        {
          name => 'basic_ostringstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wstring',
      base => [
        {
          name => 'basic_string< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
        {
          name => 'std::wstring::const_iterator'
        },
        {
          name => 'std::wstring::const_reverse_iterator'
        },
        {
          name => 'std::wstring::iterator'
        },
        {
          name => 'std::wstring::reverse_iterator'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wstring::const_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wstring::const_reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wstring::iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wstring::reverse_iterator',
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL iterator class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'std::wstringstream',
      base => [
        {
          name => 'basic_stringstream< Char >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL class. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'UAV',
      base => [
        {
          name => 'QObject',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'UAV.h'
      },
      all_members => [
        {
          name => 'geolocation',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'getAltitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'getCoordinates',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'getHeading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'getHeight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'getInstance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'kill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'm_dAltitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAV'
        },
        {
          name => 'm_dHeading',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAV'
        },
        {
          name => 'm_dHeight',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAV'
        },
        {
          name => 'm_pPosition',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAV'
        },
        {
          name => 'positionChanged',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'setAltitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'setCoordinates',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'setHeading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'setHeight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'singleton',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAV'
        },
        {
          name => 'UAV',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAV'
        },
        {
          name => 'updateHeading',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => 'updateHeight',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAV'
        },
        {
          name => '~UAV',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAV'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'getAltitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' altitude getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'altitude in meters double '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getCoordinates',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' coordinates getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'latitude / longitude coordinates in decimal degrees LatLongCoord* '
                    }
                  ]
                }
              ]
            },
            type => 'LatLongCoord *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getHeading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' heading getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'heading in degrees double '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getHeight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' height getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'heading in degrees double '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'setAltitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' altitude setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dAltitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'new altitude double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dAltitude',
                type => 'double'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setCoordinates',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' coordinates setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pPosition'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'new GPS coordinates LatLongCoord* '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pPosition',
                type => 'LatLongCoord *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setHeading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' heading setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dHeading'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'new heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dHeading',
                type => 'double'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setHeight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' height setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dHeading'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'new heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dHeight',
                type => 'double'
              }
            ]
          }
        ]
      },
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'geolocation',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'geolocation update slot '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_fLatitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'latitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_fLongitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'longitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_fAltitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'altitude double '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_fHeading'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => '"false" heading double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_fLatitude',
                type => 'double'
              },
              {
                declaration_name => 'p_fLongitude',
                type => 'double'
              },
              {
                declaration_name => 'p_fAltitude',
                type => 'double'
              },
              {
                declaration_name => 'p_fHeading',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'updateHeading',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => '"real" heading update slot '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => '"real" heading value double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'updateHeight',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Height (from ground) update slot. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pValue'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => '"real" heading value double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pValue',
                type => 'double'
              }
            ]
          }
        ]
      },
      signals => {
        members => [
          {
            kind => 'signal',
            name => 'positionChanged',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Position changed event signal. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'getInstance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' instance getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd7/dd4/a00013',
                      content => 'UAV'
                    },
                    {
                      type => 'text',
                      content => ' pointer UAV* '
                    }
                  ]
                }
              ]
            },
            type => 'static UAV *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'kill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd7/dd4/a00013',
                  content => 'UAV'
                },
                {
                  type => 'text',
                  content => ' instance killer. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'static void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'UAV',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd7/dd4/a00013',
                      content => 'UAV'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~UAV',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_dAltitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_dHeading',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_dHeight',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_pPosition',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LatLongCoord *'
          }
        ]
      },
      private_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'singleton',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static UAV *',
            initializer => '= NULL'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'UAVLogger',
      base => [
        {
          name => 'QObject',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'UAVLogger.h'
      },
      all_members => [
        {
          name => 'dataFile',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAVLogger'
        },
        {
          name => 'getDataLoggerStream',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAVLogger'
        },
        {
          name => 'getSystemLoggerStream',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAVLogger'
        },
        {
          name => 'pollLog',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAVLogger'
        },
        {
          name => 'sysFile',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAVLogger'
        },
        {
          name => 'sysLog',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'UAVLogger'
        },
        {
          name => 'UAVLogger',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAVLogger'
        },
        {
          name => '~UAVLogger',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'UAVLogger'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'UAVLogger',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd2/de7/a00014',
                      content => 'UAVLogger'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~UAVLogger',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getDataLoggerStream',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Data logger getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'CCardDetection QTextStream* '
                    }
                  ]
                }
              ]
            },
            type => 'QTextStream *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getSystemLoggerStream',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'System logger getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'System logger pointer QTextStream* '
                    }
                  ]
                }
              ]
            },
            type => 'QTextStream *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'dataFile',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QFile *'
          },
          {
            kind => 'variable',
            name => 'pollLog',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTextStream *'
          },
          {
            kind => 'variable',
            name => 'sysFile',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QFile *'
          },
          {
            kind => 'variable',
            name => 'sysLog',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QTextStream *'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'video',
      base => [
        {
          name => 'QMainWindow',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      includes => {
        local => 'yes',
        name => 'video.h'
      },
      all_members => [
        {
          name => 'activateAddingPoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'addPoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'afficheList',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'clearMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'close',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'drawMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'editWaypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'finishEditData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'loadData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'myMission',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'video'
        },
        {
          name => 'openMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'openNewMap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'openNewWindowData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'openNewWindowMain',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'openNewWindowVideo',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'path',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'video'
        },
        {
          name => 'saveEditData',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'saveMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'switchToMap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => 'ui',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'video'
        },
        {
          name => 'video',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        },
        {
          name => '~video',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'video'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'video',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'parent',
                type => 'QWidget *',
                default_value => '0'
              }
            ]
          },
          {
            kind => 'function',
            name => '~video',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_slots => {
        members => [
          {
            kind => 'slot',
            name => 'activateAddingPoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'addPoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'lon',
                type => 'qreal'
              },
              {
                declaration_name => 'lat',
                type => 'qreal'
              },
              {
                type => 'GeoDataCoordinates::Unit'
              }
            ]
          },
          {
            kind => 'slot',
            name => 'afficheList',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'clearMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'close',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'drawMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'editWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'finishEditData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'loadData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openNewMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openNewWindowData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openNewWindowMain',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'openNewWindowVideo',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'saveEditData',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'saveMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'slot',
            name => 'switchToMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'myMission',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'mission'
          },
          {
            kind => 'variable',
            name => 'path',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'ui',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'Ui::video *'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'waypoint',
      includes => {
        local => 'yes',
        name => 'waypoint.h'
      },
      all_members => [
        {
          name => 'altitudeW',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'getAlt',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'getHdg',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'getLat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'getLong',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'getMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'getNum',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'getTime',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'getType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'hdgW',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'latitudeW',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'longitudeW',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'numMissionW',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'numW',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'setAlt',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'setHdg',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'setLat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'setLong',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'setMission',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'setNum',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'setTime',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'setType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'timeW',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'typeW',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'waypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => 'waypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        },
        {
          name => '~waypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'waypoint'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'num',
                type => 'int'
              },
              {
                declaration_name => 'longitude',
                type => 'qreal'
              },
              {
                declaration_name => 'latitude',
                type => 'qreal'
              },
              {
                declaration_name => 'altitude',
                type => 'double'
              },
              {
                declaration_name => 'hdg',
                type => 'double'
              },
              {
                declaration_name => 'time',
                type => 'int'
              },
              {
                declaration_name => 'type',
                type => 'int'
              },
              {
                declaration_name => 'numMission',
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => '~waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getAlt',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getHdg',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getLat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'qreal',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getLong',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'qreal',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getNum',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getTime',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'setAlt',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'alt',
                type => 'double'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setHdg',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'hd',
                type => 'double'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setLat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'lat',
                type => 'qreal'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setLong',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'lon',
                type => 'qreal'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'numMission',
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setNum',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setTime',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ti',
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ty',
                type => 'int'
              }
            ]
          }
        ]
      },
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'altitudeW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'hdgW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'latitudeW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'qreal'
          },
          {
            kind => 'variable',
            name => 'longitudeW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'qreal'
          },
          {
            kind => 'variable',
            name => 'numMissionW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'numW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'timeW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'typeW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'Waypoint',
      includes => {
        local => 'yes',
        name => 'Waypoints.h'
      },
      all_members => [
        {
          name => 'getAction',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'getAltitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'getCoordinates',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'getDistance',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'getNumber',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'm_dAltitude',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'Waypoint'
        },
        {
          name => 'm_iNumber',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'Waypoint'
        },
        {
          name => 'm_pAction',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'Waypoint'
        },
        {
          name => 'm_pCoordinates',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'Waypoint'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'setAction',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'setAction',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'setAltitude',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'setCoordinates',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'setNumber',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'toXML',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'Waypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'Waypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'Waypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => 'Waypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        },
        {
          name => '~Waypoint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'Waypoint'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'Waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd4/d51/a00017',
                      content => 'Waypoint'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'Waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_iNumber'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'waypoint number int '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd4/d51/a00017',
                      content => 'Waypoint'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_iNumber',
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pWaypoint'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'waypoint model Waypoint* '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd4/d51/a00017',
                      content => 'Waypoint'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pWaypoint',
                type => 'Waypoint *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Constructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pCoordinates'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'waypoint coordinates LatLongCoord* '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_dAltitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'waypoint altitude double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'url',
                      link => 'd4/d51/a00017',
                      content => 'Waypoint'
                    },
                    {
                      type => 'text',
                      content => ' instance '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pCoordinates',
                type => 'LatLongCoord *'
              },
              {
                declaration_name => 'p_dAltitude',
                type => 'double',
                default_value => '0.'
              }
            ]
          },
          {
            kind => 'function',
            name => '~Waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Destructor. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getAction',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' action getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'Action *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getAltitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' altitude getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getCoordinates',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' coordinates getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'LatLongCoord *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'getDistance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Compute distance between 2 waypoints. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pWaypoint'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'second waypoint model Waypoint* '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'double',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pWaypoint',
                type => 'Waypoint *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'getNumber',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' number getter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'int',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Comparaison operator. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pWaypoint'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'second waypoint model '
                      },
                      {
                        type => 'url',
                        link => 'd4/d51/a00017',
                        content => 'Waypoint'
                      },
                      {
                        type => 'text',
                        content => '& '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'Equality between the 2 models bool '
                    }
                  ]
                }
              ]
            },
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pWaypoint',
                type => 'const Waypoint &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setAction',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Action setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pAction'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'associated action Action* '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pAction',
                type => 'Action *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setAction',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'set action by its string '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pAction'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'associated action string QString '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pAction',
                type => 'QString'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setAltitude',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Altitude setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_dAltitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'waypoint altitude double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_dAltitude',
                type => 'double'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setCoordinates',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Coordinates setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_pCoordinates'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'waypoint coordinates LatLongCoord* '
                      }
                    ]
                  },
                  {
                    parameters => [
                      {
                        name => 'p_dAltitude'
                      }
                    ],
                    doc => [
                      {
                        type => 'parbreak'
                      },
                      {
                        type => 'text',
                        content => 'waypoint altitude double '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pCoordinates',
                type => 'LatLongCoord *'
              },
              {
                declaration_name => 'p_dAltitude',
                type => 'double',
                default_value => '0.'
              }
            ]
          },
          {
            kind => 'function',
            name => 'setNumber',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'url',
                  link => 'd4/d51/a00017',
                  content => 'Waypoint'
                },
                {
                  type => 'text',
                  content => ' number setter. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'p_iNumber'
                      }
                    ],
                    doc => [
                      {
                        type => 'text',
                        content => 'waypoint number int '
                      }
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'none '
                    }
                  ]
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_iNumber',
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'toXML',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'text',
                  content => 'Describe a waypoint in XML structure. '
                }
              ]
            },
            detailed => {
              doc => [
                params => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                exceptions => [
                  {
                    parameters => [
                      {
                        name => 'none'
                      }
                    ],
                    doc => [
                    ]
                  }
                ],
                {
                  return => [
                    {
                      type => 'text',
                      content => 'XML representation of waypoint QDomElement '
                    }
                  ]
                }
              ]
            },
            type => 'QDomElement',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'p_pDocument',
                type => 'QDomDocument'
              }
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_dAltitude',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'double'
          },
          {
            kind => 'variable',
            name => 'm_iNumber',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'm_pAction',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'Action *'
          },
          {
            kind => 'variable',
            name => 'm_pCoordinates',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LatLongCoord *'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'WAYPOINT',
      includes => {
        local => 'yes',
        name => 'ComThread.h'
      },
      all_members => [
        {
          name => 'chksum',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'dummy_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'dummy_2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'height',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'max_speed',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'pos_acc',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'properties',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'time',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'wp_number',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'X',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'Y',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        },
        {
          name => 'yaw',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'WAYPOINT'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'chksum',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'short'
          },
          {
            kind => 'variable',
            name => 'dummy_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'variable',
            name => 'dummy_2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short'
          },
          {
            kind => 'variable',
            name => 'height',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'max_speed',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'variable',
            name => 'pos_acc',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short'
          },
          {
            kind => 'variable',
            name => 'properties',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'variable',
            name => 'time',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short'
          },
          {
            kind => 'variable',
            name => 'wp_number',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'variable',
            name => 'X',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'Y',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          },
          {
            kind => 'variable',
            name => 'yaw',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int'
          }
        ]
      },
      brief => {},
      detailed => {}
    }
  ],
  namespaces => [
    {
      name => 'Marble',
      classes => [
      ],
      namespaces => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'std',
      classes => [
        {
          name => 'std::allocator'
        },
        {
          name => 'std::array'
        },
        {
          name => 'std::auto_ptr'
        },
        {
          name => 'std::bad_alloc'
        },
        {
          name => 'std::bad_cast'
        },
        {
          name => 'std::bad_exception'
        },
        {
          name => 'std::bad_typeid'
        },
        {
          name => 'std::basic_fstream'
        },
        {
          name => 'std::basic_ifstream'
        },
        {
          name => 'std::basic_ios'
        },
        {
          name => 'std::basic_iostream'
        },
        {
          name => 'std::basic_istream'
        },
        {
          name => 'std::basic_istringstream'
        },
        {
          name => 'std::basic_ofstream'
        },
        {
          name => 'std::basic_ostream'
        },
        {
          name => 'std::basic_ostringstream'
        },
        {
          name => 'std::basic_string'
        },
        {
          name => 'std::basic_stringstream'
        },
        {
          name => 'std::bitset'
        },
        {
          name => 'std::complex'
        },
        {
          name => 'std::deque'
        },
        {
          name => 'std::domain_error'
        },
        {
          name => 'std::error_category'
        },
        {
          name => 'std::error_code'
        },
        {
          name => 'std::error_condition'
        },
        {
          name => 'std::exception'
        },
        {
          name => 'std::forward_list'
        },
        {
          name => 'std::fstream'
        },
        {
          name => 'std::ifstream'
        },
        {
          name => 'std::invalid_argument'
        },
        {
          name => 'std::ios'
        },
        {
          name => 'std::ios_base'
        },
        {
          name => 'std::istream'
        },
        {
          name => 'std::istringstream'
        },
        {
          name => 'std::length_error'
        },
        {
          name => 'std::list'
        },
        {
          name => 'std::logic_error'
        },
        {
          name => 'std::map'
        },
        {
          name => 'std::multimap'
        },
        {
          name => 'std::multiset'
        },
        {
          name => 'std::ofstream'
        },
        {
          name => 'std::ostream'
        },
        {
          name => 'std::ostringstream'
        },
        {
          name => 'std::out_of_range'
        },
        {
          name => 'std::overflow_error'
        },
        {
          name => 'std::priority_queue'
        },
        {
          name => 'std::queue'
        },
        {
          name => 'std::range_error'
        },
        {
          name => 'std::runtime_error'
        },
        {
          name => 'std::set'
        },
        {
          name => 'std::smart_ptr'
        },
        {
          name => 'std::stack'
        },
        {
          name => 'std::string'
        },
        {
          name => 'std::stringstream'
        },
        {
          name => 'std::system_error'
        },
        {
          name => 'std::thread'
        },
        {
          name => 'std::underflow_error'
        },
        {
          name => 'std::unique_ptr'
        },
        {
          name => 'std::unordered_map'
        },
        {
          name => 'std::unordered_multimap'
        },
        {
          name => 'std::unordered_multiset'
        },
        {
          name => 'std::unordered_set'
        },
        {
          name => 'std::valarray'
        },
        {
          name => 'std::vector'
        },
        {
          name => 'std::weak_ptr'
        },
        {
          name => 'std::wfstream'
        },
        {
          name => 'std::wifstream'
        },
        {
          name => 'std::wios'
        },
        {
          name => 'std::wistream'
        },
        {
          name => 'std::wistringstream'
        },
        {
          name => 'std::wofstream'
        },
        {
          name => 'std::wostream'
        },
        {
          name => 'std::wostringstream'
        },
        {
          name => 'std::wstring'
        },
        {
          name => 'std::wstringstream'
        }
      ],
      namespaces => [
      ],
      brief => {
        doc => [
          {
            type => 'text',
            content => 'STL namespace. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'Ui',
      classes => [
      ],
      namespaces => [
      ],
      brief => {},
      detailed => {}
    }
  ],
  files => [
    {
      name => 'CommunicationControl.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'CommunicationControl.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'ComThread.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'ComThread.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'dinput.h',
      includes => [
      ],
      included_by => [
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'D3DCOLOR',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DWORD'
          },
          {
            kind => 'typedef',
            name => 'DIACTION',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIACTIONW'
          },
          {
            kind => 'typedef',
            name => 'DIACTIONFORMAT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIACTIONFORMATW'
          },
          {
            kind => 'typedef',
            name => 'DICONFIGUREDEVICESPARAMS',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DICONFIGUREDEVICESPARAMSW'
          },
          {
            kind => 'typedef',
            name => 'DIDEVICEIMAGEINFO',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIDEVICEIMAGEINFOW'
          },
          {
            kind => 'typedef',
            name => 'DIDEVICEIMAGEINFOHEADER',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIDEVICEIMAGEINFOHEADERW'
          },
          {
            kind => 'typedef',
            name => 'DIDEVICEINSTANCE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIDEVICEINSTANCEW'
          },
          {
            kind => 'typedef',
            name => 'DIDEVICEINSTANCE_DX3',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIDEVICEINSTANCE_DX3W'
          },
          {
            kind => 'typedef',
            name => 'DIDEVICEOBJECTINSTANCE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIDEVICEOBJECTINSTANCEW'
          },
          {
            kind => 'typedef',
            name => 'DIDEVICEOBJECTINSTANCE_DX3',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIDEVICEOBJECTINSTANCE_DX3W'
          },
          {
            kind => 'typedef',
            name => 'DIEFFECT_DX6',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIEFFECT'
          },
          {
            kind => 'typedef',
            name => 'DIEFFECTINFO',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIEFFECTINFOW'
          },
          {
            kind => 'typedef',
            name => 'LPCDIACTION',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPCDIACTIONW'
          },
          {
            kind => 'typedef',
            name => 'LPCDIACTIONA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIACTIONA *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIACTIONFORMAT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPCDIACTIONFORMATW'
          },
          {
            kind => 'typedef',
            name => 'LPCDIACTIONFORMATA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIACTIONFORMATA *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIACTIONFORMATW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIACTIONFORMATW *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIACTIONW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIACTIONW *'
          },
          {
            kind => 'typedef',
            name => 'LPCDICOLORSET',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DICOLORSET *'
          },
          {
            kind => 'typedef',
            name => 'LPCDICONDITION',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DICONDITION *'
          },
          {
            kind => 'typedef',
            name => 'LPCDICONFIGUREDEVICESPARAMS',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPCDICONFIGUREDEVICESPARAMSW'
          },
          {
            kind => 'typedef',
            name => 'LPCDICONFIGUREDEVICESPARAMSA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DICONFIGUREDEVICESPARAMSA *'
          },
          {
            kind => 'typedef',
            name => 'LPCDICONFIGUREDEVICESPARAMSW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DICONFIGUREDEVICESPARAMSW *'
          },
          {
            kind => 'typedef',
            name => 'LPCDICONSTANTFORCE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DICONSTANTFORCE *'
          },
          {
            kind => 'typedef',
            name => 'LPCDICUSTOMFORCE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DICUSTOMFORCE *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDATAFORMAT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDATAFORMAT *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEIMAGEINFO',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPCDIDEVICEIMAGEINFOW'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEIMAGEINFOA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEIMAGEINFOA *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEIMAGEINFOHEADER',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPCDIDEVICEIMAGEINFOHEADERW'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEIMAGEINFOHEADERA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEIMAGEINFOHEADERA *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEIMAGEINFOHEADERW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEIMAGEINFOHEADERW *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEIMAGEINFOW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEIMAGEINFOW *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEINSTANCE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPCDIDEVICEINSTANCEW'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEINSTANCE_DX3',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEINSTANCE_DX3 *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEINSTANCE_DX3A',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEINSTANCE_DX3A *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEINSTANCE_DX3W',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEINSTANCE_DX3W *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEINSTANCEA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEINSTANCEA *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEINSTANCEW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEINSTANCEW *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEOBJECTDATA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEOBJECTDATA *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEOBJECTDATA_DX',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEOBJECTDATA_DX3 *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEOBJECTINSTANCE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEOBJECTINSTANCE *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEOBJECTINSTANCE_DX3',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEOBJECTINSTANCE_DX3 *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEOBJECTINSTANCE_DX3A',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEOBJECTINSTANCE_DX3A *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEOBJECTINSTANCE_DX3W',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEOBJECTINSTANCE_DX3W *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEOBJECTINSTANCEA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEOBJECTINSTANCEA *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIDEVICEOBJECTINSTANCEW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDEVICEOBJECTINSTANCEW *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIEFFECT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIEFFECT *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIEFFECT_DX5',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIEFFECT_DX5 *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIEFFECTINFO',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIEFFECTINFO *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIEFFECTINFOA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIEFFECTINFOA *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIEFFECTINFOW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIEFFECTINFOW *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIENVELOPE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIENVELOPE *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIFILEEFFECT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIFILEEFFECT *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIOBJECTDATAFORMAT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIOBJECTDATAFORMAT *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPERIODIC',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPERIODIC *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPROPCAL',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPROPCAL *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPROPCALPOV',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPROPCALPOV *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPROPCPOINTS',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPROPCPOINTS *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPROPDWORD',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPROPDWORD *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPROPGUIDANDPATH',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPROPGUIDANDPATH *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPROPHEADER',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPROPHEADER *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPROPPOINTER',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPROPPOINTER *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPROPRANGE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPROPRANGE *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIPROPSTRING',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIPROPSTRING *'
          },
          {
            kind => 'typedef',
            name => 'LPCDIRAMPFORCE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIRAMPFORCE *'
          },
          {
            kind => 'typedef',
            name => 'LPDIACTION',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIACTIONW'
          },
          {
            kind => 'typedef',
            name => 'LPDIACTIONFORMAT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIACTIONFORMATW'
          },
          {
            kind => 'typedef',
            name => 'LPDICONFIGUREDEVICESPARAMS',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDICONFIGUREDEVICESPARAMSW'
          },
          {
            kind => 'typedef',
            name => 'LPDIDEVICEIMAGEINFO',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIDEVICEIMAGEINFOW'
          },
          {
            kind => 'typedef',
            name => 'LPDIDEVICEIMAGEINFOHEADER',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIDEVICEIMAGEINFOHEADERW'
          },
          {
            kind => 'typedef',
            name => 'LPDIDEVICEINSTANCE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIDEVICEINSTANCEW'
          },
          {
            kind => 'typedef',
            name => 'LPDIDEVICEINSTANCE_DX3',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIDEVICEINSTANCE_DX3W'
          },
          {
            kind => 'typedef',
            name => 'LPDIDEVICEOBJECTINSTANCE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIDEVICEOBJECTINSTANCEW'
          },
          {
            kind => 'typedef',
            name => 'LPDIDEVICEOBJECTINSTANCE_DX3',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIDEVICEOBJECTINSTANCE_DX3W'
          },
          {
            kind => 'typedef',
            name => 'LPDIEFFECT_DX6',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIEFFECT'
          },
          {
            kind => 'typedef',
            name => 'LPDIEFFECTINFO',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIEFFECTINFOW'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput2 *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT2A',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput2A *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT2W',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput2W *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT7',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput7 *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT7A',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput7A *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT7W',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput7W *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT8',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput8 *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT8A',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput8A *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUT8W',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInput8W *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputA *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice2 *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE2A',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice2A *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE2W',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice2W *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE7',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice7 *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE7A',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice7A *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE7W',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice7W *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE8',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice8 *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE8A',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice8A *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICE8W',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDevice8W *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICEA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDeviceA *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTDEVICEW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputDeviceW *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTEFFECT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputEffect *'
          },
          {
            kind => 'typedef',
            name => 'LPDIRECTINPUTW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'struct IDirectInputW *'
          },
          {
            kind => 'typedef',
            name => 'LPFNSHOWJOYCPL',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void(WINAPI *',
            arguments => ')(HWND hWnd)'
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'BOOL',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typedef',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'LPDIENUMEFFECTSINFILECALLBACK',
                type => 'FAR PASCAL *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputEffect'
              },
              {
                type => 'IUnknown'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputDeviceW'
              },
              {
                type => 'IUnknown'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputDeviceA'
              },
              {
                type => 'IUnknown'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputDevice2W'
              },
              {
                type => 'IDirectInputDeviceW'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputDevice2A'
              },
              {
                type => 'IDirectInputDeviceA'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputDevice7W'
              },
              {
                type => 'IDirectInputDevice2W'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputDevice7A'
              },
              {
                type => 'IDirectInputDevice2A'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputDevice8W'
              },
              {
                type => 'IUnknown'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputDevice8A'
              },
              {
                type => 'IUnknown'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputW'
              },
              {
                type => 'IUnknown'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInputA'
              },
              {
                type => 'IUnknown'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInput2W'
              },
              {
                type => 'IDirectInputW'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInput2A'
              },
              {
                type => 'IDirectInputA'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInput7W'
              },
              {
                type => 'IDirectInput2W'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInput7A'
              },
              {
                type => 'IDirectInput2A'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInput8W'
              },
              {
                type => 'IUnknown'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DECLARE_INTERFACE_',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IDirectInput8A'
              },
              {
                type => 'IUnknown'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'CLSID_DirectInput'
              },
              {
                type => '0x25E609E0'
              },
              {
                type => '0xB259'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'CLSID_DirectInputDevice'
              },
              {
                type => '0x25E609E1'
              },
              {
                type => '0xB259'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'CLSID_DirectInput8'
              },
              {
                type => '0x25E609E4'
              },
              {
                type => '0xB259'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'CLSID_DirectInputDevice8'
              },
              {
                type => '0x25E609E5'
              },
              {
                type => '0xB259'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputA'
              },
              {
                type => '0x89521360'
              },
              {
                type => '0xAA8A'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputW'
              },
              {
                type => '0x89521361'
              },
              {
                type => '0xAA8A'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInput2A'
              },
              {
                type => '0x5944E662'
              },
              {
                type => '0xAA8A'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInput2W'
              },
              {
                type => '0x5944E663'
              },
              {
                type => '0xAA8A'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInput7A'
              },
              {
                type => '0x9A4CB684'
              },
              {
                type => '0x236D'
              },
              {
                type => '0x11D3'
              },
              {
                type => '0x8E'
              },
              {
                type => '0x9D'
              },
              {
                type => '0x00'
              },
              {
                type => '0xC0'
              },
              {
                type => '0x4F'
              },
              {
                type => '0x68'
              },
              {
                type => '0x44'
              },
              {
                type => '0xAE'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInput7W'
              },
              {
                type => '0x9A4CB685'
              },
              {
                type => '0x236D'
              },
              {
                type => '0x11D3'
              },
              {
                type => '0x8E'
              },
              {
                type => '0x9D'
              },
              {
                type => '0x00'
              },
              {
                type => '0xC0'
              },
              {
                type => '0x4F'
              },
              {
                type => '0x68'
              },
              {
                type => '0x44'
              },
              {
                type => '0xAE'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInput8A'
              },
              {
                type => '0xBF798030'
              },
              {
                type => '0x483A'
              },
              {
                type => '0x4DA2'
              },
              {
                type => '0xAA'
              },
              {
                type => '0x99'
              },
              {
                type => '0x5D'
              },
              {
                type => '0x64'
              },
              {
                type => '0xED'
              },
              {
                type => '0x36'
              },
              {
                type => '0x97'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInput8W'
              },
              {
                type => '0xBF798031'
              },
              {
                type => '0x483A'
              },
              {
                type => '0x4DA2'
              },
              {
                type => '0xAA'
              },
              {
                type => '0x99'
              },
              {
                type => '0x5D'
              },
              {
                type => '0x64'
              },
              {
                type => '0xED'
              },
              {
                type => '0x36'
              },
              {
                type => '0x97'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputDeviceA'
              },
              {
                type => '0x5944E680'
              },
              {
                type => '0xC92E'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputDeviceW'
              },
              {
                type => '0x5944E681'
              },
              {
                type => '0xC92E'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputDevice2A'
              },
              {
                type => '0x5944E682'
              },
              {
                type => '0xC92E'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputDevice2W'
              },
              {
                type => '0x5944E683'
              },
              {
                type => '0xC92E'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputDevice7A'
              },
              {
                type => '0x57D7C6BC'
              },
              {
                type => '0x2356'
              },
              {
                type => '0x11D3'
              },
              {
                type => '0x8E'
              },
              {
                type => '0x9D'
              },
              {
                type => '0x00'
              },
              {
                type => '0xC0'
              },
              {
                type => '0x4F'
              },
              {
                type => '0x68'
              },
              {
                type => '0x44'
              },
              {
                type => '0xAE'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputDevice7W'
              },
              {
                type => '0x57D7C6BD'
              },
              {
                type => '0x2356'
              },
              {
                type => '0x11D3'
              },
              {
                type => '0x8E'
              },
              {
                type => '0x9D'
              },
              {
                type => '0x00'
              },
              {
                type => '0xC0'
              },
              {
                type => '0x4F'
              },
              {
                type => '0x68'
              },
              {
                type => '0x44'
              },
              {
                type => '0xAE'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputDevice8A'
              },
              {
                type => '0x54D41080'
              },
              {
                type => '0xDC15'
              },
              {
                type => '0x4833'
              },
              {
                type => '0xA4'
              },
              {
                type => '0x1B'
              },
              {
                type => '0x74'
              },
              {
                type => '0x8F'
              },
              {
                type => '0x73'
              },
              {
                type => '0xA3'
              },
              {
                type => '0x81'
              },
              {
                type => '0x79'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputDevice8W'
              },
              {
                type => '0x54D41081'
              },
              {
                type => '0xDC15'
              },
              {
                type => '0x4833'
              },
              {
                type => '0xA4'
              },
              {
                type => '0x1B'
              },
              {
                type => '0x74'
              },
              {
                type => '0x8F'
              },
              {
                type => '0x73'
              },
              {
                type => '0xA3'
              },
              {
                type => '0x81'
              },
              {
                type => '0x79'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'IID_IDirectInputEffect'
              },
              {
                type => '0xE7E1F7C0'
              },
              {
                type => '0x88D2'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_XAxis'
              },
              {
                type => '0xA36D02E0'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_YAxis'
              },
              {
                type => '0xA36D02E1'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_ZAxis'
              },
              {
                type => '0xA36D02E2'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_RxAxis'
              },
              {
                type => '0xA36D02F4'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_RyAxis'
              },
              {
                type => '0xA36D02F5'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_RzAxis'
              },
              {
                type => '0xA36D02E3'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Slider'
              },
              {
                type => '0xA36D02E4'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Button'
              },
              {
                type => '0xA36D02F0'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Key'
              },
              {
                type => '0x55728220'
              },
              {
                type => '0xD33C'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_POV'
              },
              {
                type => '0xA36D02F2'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Unknown'
              },
              {
                type => '0xA36D02F3'
              },
              {
                type => '0xC9F3'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_SysMouse'
              },
              {
                type => '0x6F1D2B60'
              },
              {
                type => '0xD5A0'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_SysKeyboard'
              },
              {
                type => '0x6F1D2B61'
              },
              {
                type => '0xD5A0'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Joystick'
              },
              {
                type => '0x6F1D2B70'
              },
              {
                type => '0xD5A0'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_SysMouseEm'
              },
              {
                type => '0x6F1D2B80'
              },
              {
                type => '0xD5A0'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_SysMouseEm2'
              },
              {
                type => '0x6F1D2B81'
              },
              {
                type => '0xD5A0'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_SysKeyboardEm'
              },
              {
                type => '0x6F1D2B82'
              },
              {
                type => '0xD5A0'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_SysKeyboardEm2'
              },
              {
                type => '0x6F1D2B83'
              },
              {
                type => '0xD5A0'
              },
              {
                type => '0x11CF'
              },
              {
                type => '0xBF'
              },
              {
                type => '0xC7'
              },
              {
                type => '0x44'
              },
              {
                type => '0x45'
              },
              {
                type => '0x53'
              },
              {
                type => '0x54'
              },
              {
                type => '0x00'
              },
              {
                type => '0x00'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_ConstantForce'
              },
              {
                type => '0x13541C20'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_RampForce'
              },
              {
                type => '0x13541C21'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Square'
              },
              {
                type => '0x13541C22'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Sine'
              },
              {
                type => '0x13541C23'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Triangle'
              },
              {
                type => '0x13541C24'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_SawtoothUp'
              },
              {
                type => '0x13541C25'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_SawtoothDown'
              },
              {
                type => '0x13541C26'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Spring'
              },
              {
                type => '0x13541C27'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Damper'
              },
              {
                type => '0x13541C28'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Inertia'
              },
              {
                type => '0x13541C29'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_Friction'
              },
              {
                type => '0x13541C2A'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DEFINE_GUID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'GUID_CustomForce'
              },
              {
                type => '0x13541C2B'
              },
              {
                type => '0x8E33'
              },
              {
                type => '0x11D0'
              },
              {
                type => '0x9A'
              },
              {
                type => '0xD0'
              },
              {
                type => '0x00'
              },
              {
                type => '0xA0'
              },
              {
                type => '0xC9'
              },
              {
                type => '0xA0'
              },
              {
                type => '0x6E'
              },
              {
                type => '0x35'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DirectInput8Create',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'HRESULT WINAPI',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'hinst',
                type => 'HINSTANCE'
              },
              {
                declaration_name => 'dwVersion',
                type => 'DWORD'
              },
              {
                declaration_name => 'riidltf',
                type => 'REFIID'
              },
              {
                declaration_name => 'ppvOut',
                type => 'LPVOID *'
              },
              {
                declaration_name => 'punkOuter',
                type => 'LPUNKNOWN'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DirectInputCreateA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'HRESULT WINAPI',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'hinst',
                type => 'HINSTANCE'
              },
              {
                declaration_name => 'dwVersion',
                type => 'DWORD'
              },
              {
                declaration_name => 'ppDI',
                type => 'LPDIRECTINPUTA *'
              },
              {
                declaration_name => 'punkOuter',
                type => 'LPUNKNOWN'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DirectInputCreateEx',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'HRESULT WINAPI',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'hinst',
                type => 'HINSTANCE'
              },
              {
                declaration_name => 'dwVersion',
                type => 'DWORD'
              },
              {
                declaration_name => 'riidltf',
                type => 'REFIID'
              },
              {
                declaration_name => 'ppvOut',
                type => 'LPVOID *'
              },
              {
                declaration_name => 'punkOuter',
                type => 'LPUNKNOWN'
              }
            ]
          },
          {
            kind => 'function',
            name => 'DirectInputCreateW',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'HRESULT WINAPI',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'hinst',
                type => 'HINSTANCE'
              },
              {
                declaration_name => 'dwVersion',
                type => 'DWORD'
              },
              {
                declaration_name => 'ppDI',
                type => 'LPDIRECTINPUTW *'
              },
              {
                declaration_name => 'punkOuter',
                type => 'LPUNKNOWN'
              }
            ]
          },
          {
            kind => 'function',
            name => 'joyConfigChanged',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'WINMMAPI MMRESULT WINAPI',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dwFlags',
                type => 'DWORD'
              }
            ]
          },
          {
            kind => 'function',
            name => 'ShowJoyCPL',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void WINAPI',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'hWnd',
                type => 'HWND'
              }
            ]
          }
        ]
      },
      variables => {
        members => [
          {
            kind => 'variable',
            name => 'c_dfDIJoystick',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDATAFORMAT'
          },
          {
            kind => 'variable',
            name => 'c_dfDIJoystick2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDATAFORMAT'
          },
          {
            kind => 'variable',
            name => 'c_dfDIKeyboard',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDATAFORMAT'
          },
          {
            kind => 'variable',
            name => 'c_dfDIMouse',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDATAFORMAT'
          },
          {
            kind => 'variable',
            name => 'c_dfDIMouse2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const DIDATAFORMAT'
          },
          {
            kind => 'variable',
            name => 'DWORD',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typedef'
          },
          {
            kind => 'variable',
            name => 'LPVOID',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typedef'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'JoystickGrabber.cpp',
      includes => [
      ],
      included_by => [
      ],
      functions => {
        members => [
          {
            kind => 'function',
            name => 'CreateDeviceCallback',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'BOOL CALLBACK',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'instance',
                type => 'LPCDIDEVICEINSTANCE'
              },
              {
                declaration_name => 'reference',
                type => 'LPVOID'
              }
            ]
          }
        ]
      },
      variables => {
        members => [
          {
            kind => 'variable',
            name => 'direct_input_object',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIRECTINPUT8',
            initializer => '= NULL'
          },
          {
            kind => 'variable',
            name => 'instance',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'HINSTANCE',
            initializer => '= NULL'
          },
          {
            kind => 'variable',
            name => 'joypad',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'LPDIRECTINPUTDEVICE8',
            initializer => '= NULL'
          },
          {
            kind => 'variable',
            name => 'result',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'HRESULT'
          },
          {
            kind => 'variable',
            name => 'state',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'DIJOYSTATE'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'JoystickGrabber.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'LatLongCoord.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'LatLongCoord.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'LogReplayControl.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'LogReplayControl.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'main.cpp',
      includes => [
      ],
      included_by => [
      ],
      functions => {
        members => [
          {
            kind => 'function',
            name => 'main',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'argc',
                type => 'int'
              },
              {
                declaration_name => 'argv',
                type => 'char *',
                array => '[]'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'marcs.cpp',
      includes => [
      ],
      included_by => [
      ],
      variables => {
        members => [
          {
            kind => 'variable',
            name => 'stream',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::stringstream'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'marcs.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'mission.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'mission.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'MissionControl.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'MissionControl.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'PeripheralController.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'PeripheralController.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'RPA.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'RPA.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'UAV.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'UAV.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'UAVLogger.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'UAVLogger.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'video.cpp',
      includes => [
      ],
      included_by => [
      ],
      variables => {
        members => [
          {
            kind => 'variable',
            name => 'affichageList',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          },
          {
            kind => 'variable',
            name => 'document',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataDocument *'
          },
          {
            kind => 'variable',
            name => 'fileOpened',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'gp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoPainter *'
          },
          {
            kind => 'variable',
            name => 'lastMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'lastMission',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'm_listView',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QListView *'
          },
          {
            kind => 'variable',
            name => 'manager',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RoutingManager *'
          },
          {
            kind => 'variable',
            name => 'manager_smallMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RoutingManager *'
          },
          {
            kind => 'variable',
            name => 'num_waypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int',
            initializer => '= 0'
          },
          {
            kind => 'variable',
            name => 'numWpText',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char *',
            initializer => '= new char[32]'
          },
          {
            kind => 'variable',
            name => 'open',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            initializer => '= false'
          },
          {
            kind => 'variable',
            name => 'place',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataPlacemark *'
          },
          {
            kind => 'variable',
            name => 'qstr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QString'
          },
          {
            kind => 'variable',
            name => 'request',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RouteRequest *'
          },
          {
            kind => 'variable',
            name => 'request_smallMap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'RouteRequest *'
          },
          {
            kind => 'variable',
            name => 'temp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'string'
          },
          {
            kind => 'variable',
            name => 'tempo',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'GeoDataCoordinates *'
          },
          {
            kind => 'variable',
            name => 'textNumWaypoint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'string'
          },
          {
            kind => 'variable',
            name => 'wpListOpen',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< waypoint * >'
          },
          {
            kind => 'variable',
            name => 'wpListSave',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'QList< waypoint * >'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'video.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'waypoint.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'waypoint.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'Waypoints.cpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'Waypoints.h',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    }
  ],
  groups => [
  ],
  pages => [
  ]
};
1;
